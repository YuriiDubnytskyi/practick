{"version":3,"sources":["containers/SingInLogIn.tsx","containers/CallBack.tsx","pages/Greeting.tsx","components/Header.tsx","api/userApi.ts","services/auth.service.ts","store/actions/actions.ts","store/actions/actionTypes.ts","containers/About.tsx","containers/Users.tsx","components/ChatItem.tsx","services/users.service.ts","services/socket.service.ts","containers/ChatList.tsx","containers/Main.tsx","pages/AuthPage.tsx","containers/Chat.tsx","pages/Home.tsx","auth0/Auth.js","App.tsx","serviceWorker.ts","store/utility.ts","store/reducers/user.ts","store/reducers/users.ts","store/reducers/messages.ts","store/reducers/room.ts","store/reducers/notifications.ts","index.tsx"],"names":["SingInLogIn","props","onClick","auth","login","CallBack","history","useHistory","useEffect","test","window","location","hash","Error","console","log","handleAuthentication","Object","entries","localStorage","key","removeItem","Greeting","path","exact","render","isAuthenticated","to","Header","className","logout","isUserExist","email","axios","get","then","res","userAuth","profile","a","email_vefified","email_verified","getUser","result","data","setUserData","type","updateUserData","deleteUser","getAllUsers","users","addMess","mess","addRoom","room","addInitMess","removeMess","initNotification","initData","addNotification","addData","connect","state","userInf","user","dispatch","bindActionCreators","useState","setUser","name","setName","setEmail","id","setId","nickname","setNickname","family_name","setFamilyName","update","setUpdate","isAuth","showObject","getProfile","status","post","createUser","undefined","push","obg","userId","idd","_id","value","onChange","e","target","userData","put","delete","deleteUserAcount","userAll","inetialUsers","setInitial","filterUsers","setFilterUsers","arr","filter","el","placeholder","event","updatedList","item","toLowerCase","search","map","startChat","messages","notification","notifications","message","setMess","setUsers","setRoom","findUserName","length","findUser","getChatMessages","mes","connectToServer","socket","getItem","emit","setItem","roomChat","setData","endpoint","socketIOClient","dat","on","pathname","alert","id1","id2","AuthPage","arrmess","messData","Home","Auth","auth0","authorize","parseHash","err","authResult","accessToken","idToken","setSession","error","expiresAt","JSON","stringify","expiresIn","Date","getTime","scopes","scope","requestedScopes","userProfile","clientID","process","returnTo","getAccessToken","cb","client","userInfo","this","WebAuth","domain","redirectUri","responseType","parse","grantedScopes","split","every","includes","App","Boolean","hostname","match","updateObject","oldObject","updatedValues","initialState","action","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","getState","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"+LAgBeA,EAViD,SAACC,GAC7D,OACI,qDAEI,0BAAQC,QAASD,EAAME,KAAKC,OAA5B,UACA,0BAAQF,QAASD,EAAME,KAAKC,OAA5B,a,OCkBGC,EAtBqB,SAACJ,GACjC,IAAIK,EAAUC,cAcd,OAbAC,qBAAU,WACN,IAAI,8BAA8BC,KAAKC,OAAOC,SAASC,MASnD,MAAM,IAAIC,MAAM,yBARhBC,QAAQC,IAAIT,GACZL,EAAME,KAAKa,qBAAqBV,GAChC,cAAyBW,OAAOC,QAAQC,cAAxC,eAAuD,CAAC,IAAD,sBAA7CC,EAA6C,UAC1C,iBAARA,GAAkC,aAARA,GAA8B,eAARA,GAAgC,WAARA,GACvED,aAAaE,WAAWD,MAMpC,IAEE,4CCMOE,EAlBqB,SAACrB,GACjC,IAAME,EAAOF,EAAME,KACnB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoB,KAAK,IAAIC,OAAK,EAACC,OAAQ,SAAAxB,GAAK,OAAIE,EAAKuB,kBACpC,kBAAC,IAAD,CAAUC,GAAG,WAEb,kBAAC,EAAD,CAAaxB,KAAMA,OAI3B,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,OAAK,GACzB,kBAAC,EAAD,eAAUrB,KAAMF,EAAME,MAAUF,O,OCMjC2B,EAtBuC,SAAC3B,GACnD,OACI,2BACA,uBAAK4B,UAAU,iDAEP,sBAAIA,UAAU,cACV,sBAAIA,UAAU,YACV,gBAAC,IAAD,CAASA,UAAU,WAAWF,GAAG,SAAjC,SAEJ,sBAAIE,UAAU,YACV,gBAAC,IAAD,CAASA,UAAU,WAAWF,GAAG,UAAjC,UAEJ,0BAAQE,UAAU,WAAW3B,QAAS,kBAAID,EAAME,KAAK2B,WAArD,c,iBCfPC,EAAc,SAACC,GAAD,OACvBC,IAAMC,IAAI,qBAAqBF,EAAMA,GAAOG,MAAM,SAACC,GAEnD,OADAtB,QAAQC,IAAI,aAAaqB,GAClBA,M,yBCLGC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACjBzB,QAAQC,KAAKuB,EAAQE,iBAClBF,EAAQG,eAFM,0CAGN,GAHM,iCAKN,GALM,2CAAH,sDASTC,EAAO,uCAAG,WAAOV,GAAP,eAAAO,EAAA,sEACER,EAAYC,GADd,cACbW,EADa,gBAENA,EAAOC,KAFD,mFAAH,sD,cCTPC,EAAc,SAACD,GACxB,MAAO,CACHE,KCJqB,gBDKrBF,KAAKA,IAIAG,EAAiB,SAACH,GAC3B,MAAO,CACHE,KCVwB,mBDWxBF,KAAKA,IAIAI,EAAa,WACtB,MAAO,CACHF,KChBmB,gBDoBdG,EAAc,SAACC,GACxB,MAAO,CACHJ,KCrBe,UDsBfI,MAAMA,IAIDC,EAAU,SAACC,GACpB,MAAO,CACHN,KC3BgB,WD4BhBM,KAAKA,IAIAC,EAAU,SAACC,GACpB,MAAO,CACHR,KCjCgB,WDkChBQ,KAAKA,IAIAC,EAAc,SAACH,GACxB,MAAO,CACHN,KCvCqB,gBDwCrBM,KAAKA,IAIAI,EAAa,WACtB,MAAO,CACHV,KC7CmB,gBDiDdW,EAAmB,SAACC,GAC7B,MAAO,CACHZ,KClDyB,oBDmDzBY,SAASA,IAIJC,EAAkB,SAACC,GAC5B,MAAO,CACHd,KCxDwB,mBDyDxBc,QAAQA,IE8DDC,eAjBS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,SAGK,SAACC,GACxB,OAAO,aACHA,YACGC,YAAmB,CACnBrB,cACAE,iBACAC,cACAiB,MAKIJ,EAnHqC,SAAC5D,GAAe,IAAD,EACxCkE,mBAAc,IAD0B,mBACnDC,GADmD,aAExCD,mBAAc,IAF0B,mBAExDE,EAFwD,KAEnDC,EAFmD,OAGtCH,mBAAc,IAHwB,mBAGxDnC,EAHwD,KAGlDuC,EAHkD,OAI5CJ,mBAAc,IAJ8B,mBAIxDK,EAJwD,KAIrDC,EAJqD,OAKhCN,mBAAc,IALkB,mBAKxDO,EALwD,KAK/CC,EAL+C,OAM3BR,mBAAc,IANa,mBAMxDS,EANwD,KAM5CC,EAN4C,OAOpCV,oBAAkB,GAPkB,mBAOxDW,EAPwD,KAOjDC,EAPiD,KASzDzE,EAAUC,cAChBC,qBAAU,WACFP,EAAM8D,QAAQiB,OAuBdC,EAAWhF,EAAM8D,SAAQ,GAtBzB9D,EAAME,KAAK+E,YAAW,SAAC5C,GACnB8B,EAAQ9B,GADyB,IAE1BN,EAAmCM,EAAnCN,MAAM0C,EAA6BpC,EAA7BoC,SAASL,EAAoB/B,EAApB+B,KAAKO,EAAetC,EAAfsC,YAC3BvC,EAASC,GAASH,MAAK,SAACC,GAAD,OAAYA,EAC/BM,EAAQV,GAAOG,MAAK,SAACC,GAAD,OACH,MAAbA,EAAI+C,OACAF,EAAW7C,GJ7Bb,SAAC4B,GAAD,OAAc/B,IAAMmD,KAAK,oBAAoBpB,GAAM7B,MAAK,SAACC,GAAD,OAAWA,KI8BjEiD,CAAW,CAACrD,QAAM0C,WAASL,OAAKO,mBAAezC,MAAK,SAAAC,QACrCkD,IAARlD,EACCtB,QAAQC,IAAI,SAEZkE,EAAW7C,EAAIQ,SAKjCtC,EAAQiF,KAAK,qBAQzB,IAEF,IAAMN,EAAa,SAACO,GAA+B,IAC3CC,EADoBC,EAAsB,wDAE3CA,GACCjB,EAAMe,EAAIhB,IACV1D,QAAQC,IAAI,YACZ0E,EAAOD,EAAIhB,KAEXC,EAAMe,EAAIG,KACVF,EAAOD,EAAIG,KAGfrB,EAAQkB,EAAInB,MACZE,EAASiB,EAAIxD,OACb2C,EAAYa,EAAId,UAChBG,EAAcW,EAAIZ,aAClB9D,QAAQC,IAAIyE,GACZ,IAAIxB,EAAO,CAACK,KAAKmB,EAAInB,KAAKrC,MAAMwD,EAAIxD,MAAM0C,SAASc,EAAId,SAASE,YAAYY,EAAIZ,YAAYJ,GAAGiB,GAC/FxF,EAAM4C,YAAYmB,IAwBtB,OACI,6BACI,kBAAC,EAAD,CAAQ7D,KAAMF,EAAME,OADxB,qBAGMkE,EAHN,IAGarC,EAHb,IAGqB0C,EAHrB,IAGgCE,EAC5B,2CACA,sCAAYP,GACXS,EAAS,2BAAOc,MAAOvB,EAAMA,KAAK,OAAOwB,SAAU,SAACC,GAAD,OAAUxB,EAAQwB,EAAEC,OAAOH,UAAU,qCACzF,yCAAehB,GACdE,EAAS,2BAAOc,MAAOhB,EAAaP,KAAK,cAAcwB,SAAU,SAACC,GAAD,OAAUjB,EAAciB,EAAEC,OAAOH,UAAU,qCAC7G,0CAAgBlB,EAAhB,uBACCI,EAAS,2BAAOc,MAAOlB,EAAUL,KAAK,WAAWwB,SAAU,SAACC,GAAD,OAAUnB,EAAYmB,EAAEC,OAAOH,UAAU,qCACnGd,EAAS,oCAAE,4BAAQ5E,QAlCT,WJ5DE,IAAC8F,KI6DR,CAACxB,KAAGH,OAAKK,WAASE,eJ7DO3C,IAAMgE,IAAI,wBAAwBD,GAAU7D,MAAK,SAACC,GAAD,OAAOA,EAAIQ,SI6DrDT,MAAK,SAACC,GAAD,OAC5CA,EAAIiC,KACJpE,EAAM8C,eAAe,CAACsB,KAAKjC,EAAIiC,KAAKO,YAAYxC,EAAIwC,YAAYF,SAAStC,EAAIsC,WAC5E5D,QAAQC,IAAI,YACfoB,MAAK,kBAAI4C,GAAU,QA6BJ,QAA2C,4BAAQ7E,QA3BlD,WAClBoE,EAAQrE,EAAM8D,QAAQM,MACtBM,EAAY1E,EAAM8D,QAAQW,UAC1BG,EAAc5E,EAAM8D,QAAQa,aAC5BG,GAAU,KAuBkD,WAAoD,4BAAQ7E,QAAS,kBAAK6E,GAAU,KAAhC,UAC5G,0CACA,4BAAQ7E,QAvBK,YJvEO,SAACsE,GAAD,OAAYvC,IAAMiE,OAAO,yBAAyB1B,EAAGA,GAAIrC,MAAK,SAACC,GAAD,OAAOA,EAAI+C,WIwEjGgB,CAAiB3B,GAChBrC,MAAK,SAACgD,GACM,MAATA,EAAalF,EAAM+C,aAAalC,QAAQC,IAAI,YAE/CoB,MAAK,WACFlC,EAAME,KAAK2B,cAiBX,qBChDG+B,eAfS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,KACdoC,QAAQtC,EAAMZ,MAAMA,UAGD,SAACe,GACxB,OAAO,aACHA,YACGC,YAAmB,CAClBjB,eACDgB,MAIIJ,EAhDqC,SAAC5D,GAAe,IAAD,EAC5BkE,mBAAc,IADc,mBACxDkC,EADwD,KAC1CC,EAD0C,OAEzBnC,mBAAc,IAFW,mBAExDoC,EAFwD,KAE3CC,EAF2C,KAI/DhG,qBAAU,WLAgByB,IAAMC,IAAI,qBAAqBC,MAAK,SAACC,GAAD,OAAOA,EAAIQ,QKEpET,MAAK,SAACsE,GACHxG,EAAMgD,YAAYwD,GAClBH,EAAWG,EAAIC,QAAO,SAACC,GAAD,OAAWA,EAAG3E,QAAU/B,EAAM8D,QAAQ/B,eAElE,IAcF,OACI,6BACI,2BAAO4E,YAAY,cAAcf,SAdhB,SAACgB,GACtB,IAAMC,EAAcT,EAAaK,QAAO,SAASK,GAC/C,OACyC,IADlCA,EAAKrC,SAASsC,cAAcC,OACjCJ,EAAMd,OAAOH,MAAMoB,kBAEG,KAAvBH,EAAMd,OAAOH,MACZY,EAAe,IAEfA,EAAeM,MAOdP,EAAYW,KAAI,SAACP,GAAU,OAAO,oCAAE,2BAAIA,EAAGjC,UAAa,4BAAQxE,QAAS,kBAAID,EAAMkH,UAAUR,EAAG3E,SAAxC,iBCqCtD6B,eAlBS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,KACdoC,QAAQtC,EAAMZ,MAAMA,MACpBE,KAAKU,EAAMsD,SAASA,SACpBC,aAAavD,EAAMwD,cAAcA,kBAGd,SAACrD,GACxB,OAAO,aACHA,YACGC,YAAmB,CAClBX,cACAF,WACDY,MAIIJ,EA9D2C,SAAC5D,GAAe,IAAD,EAC9CkE,mBAAc,IADgC,gCAE3CA,mBAAc,KAF6B,mBAE9DoD,EAF8D,KAEtDC,EAFsD,OAG5CrD,mBAAc,IAH8B,mBAG9DjB,EAH8D,KAGxDuE,EAHwD,OAI9CtD,mBAAc,IAJgC,mBAI9Db,EAJ8D,KAIzDoE,EAJyD,KAKjEpH,EAAUC,cAEdC,qBAAU,WACNkH,EAAQzH,EAAM2C,KAAKU,MACnBkE,EAAQvH,EAAM2C,KAAKwE,UAChBnH,EAAM2C,KAAKM,MAAM,KAAOjD,EAAM8D,QAAQ/B,MACrCyF,EAASxH,EAAM2C,KAAKM,MAAM,IAE1BuE,EAASxH,EAAM2C,KAAKM,MAAM,MAEhC,IAeF,OACI,6BACI,2BC5CY,SAACkD,EAAYlD,GACjC,IAAMyE,EAAevB,EAAQM,QAAO,SAACC,GAAD,OAAWA,EAAG3E,QAAUkB,KAE5D,OADApC,QAAQC,IAAI4G,EAAa,GAAG,uBACG,IAAxBA,EAAaC,OAAc,GAAID,EAAa,GAAGtD,KD0CzCwD,CAAS5H,EAAMmG,QAAQlD,IAE5B,4BAAQhD,QAlBD,WACwB,IAAhCD,EAAMoH,aAAa,GAAG/D,GNVF,SAACA,GAAD,OAAcrB,IAAMC,IAAI,+BAA+BoB,EAAKA,GAAMnB,MAAK,SAACC,GAAD,OAAOA,EAAIQ,KAAK,GAAGwE,YMW7GU,CAAgBxE,GAAMnB,MAAK,SAAC4F,GACxBjH,QAAQC,IAAI,gBAAgBgH,GAC5B9H,EAAMsD,YAAYwE,MAGtB9H,EAAMsD,YAAYgE,GAEtBzG,QAAQC,IAAI,WAAWd,EAAM2C,MAC7B3C,EAAMoD,QAAQC,GACdhD,EAAQiF,KAAK,WAOT,WACA,2BAAkC,IAA9BtF,EAAMoH,aAAaO,OAAc,qCAAM,oCAAG3H,EAAMoH,aAAa,GAAG/D,S,iBE/CnE0E,EAAkB,SAACC,EAAWjG,EAAUsB,GACF,OAA5CnC,aAAa+G,QAAb,UAAwBlG,GAAxB,OAAgCsB,KAAgE,UAA5CnC,aAAa+G,QAAb,UAAwBlG,GAAxB,OAAgCsB,MACnF2E,EAAOE,KAAK,WAAY7E,GACxBxC,QAAQC,IAAI,kBACZI,aAAaiH,QAAb,UAAwBpG,GAAxB,OAAgCsB,GAAO,UCiFhCO,eAnBS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,KACdoC,QAAQtC,EAAMZ,MAAMA,MACpBE,KAAKU,EAAMsD,SAASA,SACpBiB,SAASvE,EAAMR,KAAKA,KACpB+D,aAAavD,EAAMwD,cAAcA,kBAId,SAACrD,GACxB,OAAO,aACHA,YACGC,YAAmB,CAClBf,UAAQK,aAAWC,mBAAiBE,mBACrCM,MAIIJ,EAxEwC,SAAC5D,GAAe,IAAD,EAC3CkE,mBAAc,IAD6B,mBAC3DvB,EAD2D,KACtD0F,EADsD,OAEnCnE,mBAAS,mCAF0B,mBAE3DoE,EAF2D,KAG5DN,GAH4D,KAGnDO,IAAeD,IAoC9B,OAlCA/H,qBAAU,WTDc,IAACwB,KSER/B,EAAM+B,MTFgBC,IAAMC,IAAI,4BAA4BF,EAAMA,GAAOG,MAAK,SAACC,GAAD,OAAOA,EAAIQ,SSE5ET,MAAK,SAAAC,GAC3BkG,EAAQlG,GACR,IAAMqG,EAAQ,GACdrG,EAAI8E,KAAI,SAACP,GACLqB,EAAgBC,EAAOhI,EAAM+B,MAAM2E,EAAGrD,MACtCmF,EAAI9B,EAAGrD,MAAM,KAOjBrD,EAAMwD,iBAAiBgF,QAG7B,IAGFjI,qBAAU,WACNyH,EAAOS,GAAG,gBAAgB,SAAC9F,GACS,UAA7BlC,OAAOC,SAASgI,UACf7H,QAAQC,IAAI,aAAa6B,EAAK2E,SAC3B3E,EAAKZ,QAAU/B,EAAM8D,QAAQ/B,OAC5B/B,EAAMkD,QAAQ,CAACC,KAAKR,EAAK2E,QAAQlD,KAAKzB,EAAKyB,SAG/CpE,EAAM0D,gBAAgBf,EAAKU,MAC3BsF,MAAM,oBAAoBhG,EAAKyB,aAOvC,6BACKzB,EAAKsE,KAAI,SAACP,GACP,OACI,oCACI,kBAAC,EAAD,CAAU/D,KAAM+D,YCyCzB9C,eAjBS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,KACdoC,QAAQtC,EAAMZ,MAAMA,UAGD,SAACe,GACxB,OAAO,aACHA,YACGC,YAAmB,CAClBjB,cACAI,WACDY,MAKIJ,EAjFmC,SAAC5D,GAAc,MAEtCkE,oBAAkB,GAFoB,gCAGvCA,mBAAc,KAHyB,gCAW9BA,mBAAS,oCAXqB,mBAWtDoE,EAXsD,KAYvDN,GAZuD,KAY9CO,IAAeD,IAC1BjI,EAAUC,cACdC,qBAAU,WACN,GAAwB,KAArBP,EAAM8D,QAAQM,KAAU,CACvB,cAAyBpD,OAAOC,QAAQC,cAAxC,eAAuD,CAAC,IAAD,sBAA7CC,EAA6C,UACxC,iBAARA,GAAkC,aAARA,GAA8B,eAARA,GAAgC,WAARA,GACvED,aAAaiH,QAAQhH,EAAI,SAGjCd,EAAQiF,KAAK,aAMnB,IAoBF,OANA/E,qBAAU,WACNyH,EAAOS,GAAG,gBAAgB,SAAC9F,GACvB9B,QAAQC,IAAI,uBAAuB6B,SAKvC,6BACI,6BACI,kBAAC,EAAD,CAAQzC,KAAMF,EAAME,OAMpB,kBAAC,EAAD,CAAOgH,UA5BD,SAACzC,GACf,IV/B2BmE,EAAQC,EU+B7BlG,EAAM,CACRiG,IAAInE,EACJoE,IAAI7I,EAAM8D,QAAQ/B,OAEtBlB,QAAQC,IAAI,OAAO6B,IVnCQiG,EUoCRjG,EAAKiG,IVpCWC,EUoCPlG,EAAKkG,IVpCc7G,IAAMC,IAAI,sBAAsB2G,EAAI,IAAIC,GAAK3G,MAAK,SAACC,GAAD,OAAOA,EAAIQ,SUoCtET,MAAK,SAACC,GACxCnC,EAAMoD,QAAQjB,EAAIkB,SACnBnB,MAAK,WACJ7B,EAAQiF,KAAK,eAqBT,kBAAC,EAAD,CAAUvD,MAAO/B,EAAM8D,QAAQ/B,aC7DhC+G,EAT2C,SAAC9I,GACzD,OACI,kEAEI,0BAAQC,QAAS,kBAAID,EAAME,KAAKC,UAAhC,WC+FKyD,eAlBS,SAAEC,GACtB,MAAO,CACHC,QAAQD,EAAME,KACdoC,QAAQtC,EAAMZ,MAAMA,MACpBE,KAAKU,EAAMsD,SAASA,SACpBiB,SAASvE,EAAMR,KAAKA,SAID,SAACW,GACxB,OAAO,aACHA,YACGC,YAAmB,CAClBf,UAAQK,aAAWG,mBACpBM,MAIIJ,EAxFmC,SAAC5D,GAAe,IAAD,EAC9BkE,mBAAS,mCADqB,mBACtDoE,EADsD,aAGtCpE,mBAAS,KAH6B,mBAGtDf,EAHsD,KAGjDoE,EAHiD,OAIhCrD,mBAAc,IAJkB,mBAItD6E,EAJsD,KAKzD1I,GALyD,KAK/CC,eACR0H,EAASO,IAAeD,GAc9B/H,qBAAU,WACNwH,EAAgBC,EAAOhI,EAAM8D,QAAQ/B,MAAM/B,EAAMoI,YAKnD,IAOF7H,qBAAU,WACNyH,EAAOS,GAAG,gBAAgB,SAAC9F,GACvB9B,QAAQC,IAAI,WAAWiI,GACvBlI,QAAQC,IAAI,qCAAqCT,GACjB,UAA7BI,OAAOC,SAASgI,SACZ/F,EAAKZ,QAAU/B,EAAM8D,QAAQ/B,OAC5B/B,EAAMkD,QAAQ,CAACC,KAAKR,EAAK2E,QAAQlD,KAAKzB,EAAKyB,QAG/CpE,EAAM0D,gBAAgBf,EAAKU,MAC3BsF,MAAM,oBAAoBhG,EAAKyB,aAY3C,OACI,6BACI,4BAAQnE,QARE,WAEdD,EAAMuD,aACNlD,EAAQiF,KAAK,WAKT,aACCtF,EAAMoI,SACNpI,EAAMmD,KAAK8D,KAAI,SAACP,GACb,OAAO,2BAAIA,EAAGtC,KAAP,OAAiBsC,EAAGvD,SAE/B,2BAAOwC,MAAOxC,EAAMyC,SAAU,SAACC,GAAD,OAAS0B,EAAQ1B,EAAEC,OAAOH,UACxD,4BAAQ1F,QAvDD,WACXY,QAAQC,IAAI,OAAOd,EAAMoI,UACzB,IAAMJ,EAASO,IAAeD,GAC9BtI,EAAMkD,QAAQ,CAACC,OAAKiB,KAAKpE,EAAM8D,QAAQM,OACvC4D,EAAOE,KAAK,oBAAqBlI,EAAMoI,SAAUjF,EAAMnD,EAAM8D,QAAQ/B,MAAO/B,EAAM8D,QAAQM,MAC1F,IZRmB4E,EYQfrG,EAAO3C,EAAMmD,KACjBR,EAAK2C,KAAK,CAACnC,OAAKiB,KAAKpE,EAAM8D,QAAQM,OACnCvD,QAAQC,IAAI,2BZVOkI,EYWR,CAAC3F,KAAKrD,EAAMoI,SAASjF,KAAKR,GZXDX,IAAMgE,IAAI,wBAAwBgD,GAAU9G,MAAK,SAACC,GAAD,OAAOA,EAAIQ,QYYhG4E,EAAQ,MA8CJ,YClCG0B,EAnCa,SAACjJ,GACzB,IAAME,EAAOF,EAAME,KACnB,OACI,oCACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoB,KAAK,SAASC,OAAK,EAACC,OAAQ,SAAAxB,GAAK,OAAIE,EAAKuB,kBACzC,kBAAC,EAAD,CAAOvB,KAAMA,IAEb,kBAAC,IAAD,CAAUwB,GAAG,SAGrB,kBAAC,IAAD,CAAOJ,KAAK,QAAQC,OAAK,EAACC,OAAQ,SAAAxB,GAAK,OAAIE,EAAKuB,kBACxC,kBAAC,EAAD,CAAMvB,KAAMA,IAEZ,kBAAC,IAAD,CAAUwB,GAAG,SAGrB,kBAAC,IAAD,CAAOJ,KAAK,YAAYC,OAAK,EAACC,OAAQ,SAAAxB,GAAK,OAAIE,EAAKuB,kBAC5C,kBAAC,EAAD,CAAUvB,KAAMA,IAEhB,kBAAC,IAAD,CAAUwB,GAAG,SAGrB,kBAAC,IAAD,CAAOJ,KAAK,QAAQC,OAAK,EAACC,OAAQ,SAAAxB,GAAK,OAAIE,EAAKuB,kBACxC,kBAAC,EAAD,CAAMvB,KAAMA,IAEZ,kBAAC,IAAD,CAAUwB,GAAG,Y,wBCnCZwH,E,WACnB,WAAY7I,GAAU,IAAD,gCAerBF,MAAQ,WACN,EAAKgJ,MAAMC,aAhBQ,KAmBrBrI,qBAAuB,SAACV,GACtB,EAAK8I,MAAME,WAAU,SAACC,EAAKC,GACrBA,GAAcA,EAAWC,aAAeD,EAAWE,SACrD,EAAKC,WAAWH,GAChB1I,QAAQC,IAAI,GACZT,EAAQiF,KAAK,WACJgE,IACTzI,QAAQC,IAAI,GACZT,EAAQiF,KAAK,KACbqD,MAAM,UAAD,OAAWW,EAAIK,MAAf,6CACL9I,QAAQC,IAAIwI,QA7BG,KAkCrBI,WAAa,SAAAH,GACX1I,QAAQC,IAAIyI,GAEZ,IAAMK,EAAYC,KAAKC,UACE,IAAvBP,EAAWQ,WAAmB,IAAIC,MAAOC,WAOrCC,EAASX,EAAWY,OAAS,EAAKC,iBAAmB,GAE3DlJ,aAAaiH,QAAQ,eAAgBoB,EAAWC,aAChDtI,aAAaiH,QAAQ,WAAYoB,EAAWE,SAC5CvI,aAAaiH,QAAQ,aAAcyB,GACnC1I,aAAaiH,QAAQ,SAAU0B,KAAKC,UAAUI,KAlD3B,KA0DrBrI,OAAS,WACPX,aAAaE,WAAW,gBACxBF,aAAaE,WAAW,YACxBF,aAAaE,WAAW,cACxBF,aAAaE,WAAW,UACxB,EAAKiJ,YAAc,KACnB,EAAKlB,MAAMtH,OAAO,CAChByI,SAAUC,mCACVC,SAAS,oCAlEQ,KAuErBC,eAAiB,WACf,IAAMjB,EAActI,aAAa+G,QAAQ,gBACzC,IAAKuB,EACH,MAAM,IAAI5I,MAAM,0BAElB,OAAO4I,GA5EY,KA+ErBvE,WAAa,SAAAyF,GACX,GAAI,EAAKL,YAAa,OAAOK,EAAG,EAAKL,aACrC,EAAKlB,MAAMwB,OAAOC,SAAS,EAAKH,kBAAkB,SAACnB,EAAKjH,GAClDA,IAAS,EAAKgI,YAAchI,GAChCqI,EAAGrI,EAASiH,OAlFduB,KAAKxK,QAAUA,EACfwK,KAAKR,YAAc,KACnBQ,KAAKT,gBAAkB,oCACvBS,KAAK1B,MAAQ,IAAIA,IAAM2B,QAAQ,CAC7BC,OAAQ,gCACRT,SAAU,mCACVU,YAAY,0CAEZC,aAAc,iBACdd,MAAOU,KAAKT,kBAEdvJ,QAAQC,IAAI+J,M,8DA0CZ,IAAMjB,EAAYC,KAAKqB,MAAMhK,aAAa+G,QAAQ,eAClD,OAAO,IAAI+B,MAAOC,UAAYL,I,oCAgClBM,GACZ,IAAMiB,GACJtB,KAAKqB,MAAMhK,aAAa+G,QAAQ,YAAc,IAC9CmD,MAAM,KACR,OAAOlB,EAAOmB,OAAM,SAAAlB,GAAK,OAAIgB,EAAcG,SAASnB,U,KC1EzCoB,EAdK,SAACvL,GACHM,cACdO,QAAQC,IAAId,EAAMK,SAClB,IAAMH,EAAO,IAAIgJ,EAAKzI,OAAOJ,SAC5B,OACG,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,eAAUH,KAAMA,GAAUF,IAC1B,kBAAC,EAAD,CAAME,KAAMA,OCFRsL,QACW,cAA7B/K,OAAOC,SAAS+K,UAEe,UAA7BhL,OAAOC,SAAS+K,UAEhBhL,OAAOC,SAAS+K,SAASC,MACvB,2D,YClBOC,EAAe,SAACC,EAAeC,GACxC,OAAO,2BACAD,GACAC,ICALC,EAAmB,CACrBvH,GAAG,EACHH,KAAK,GACLrC,MAAM,GACN0C,SAAS,GACTE,YAAY,GACZI,QAAO,GAmCIhB,GAhCF,WAAwC,IAAvCF,EAAsC,uDAA1BiI,EAAaC,EAAa,uCAChD,OAAQA,EAAOlJ,MACX,IfdqB,gBeejB,OAAO8I,EAAa9H,EAAM,CACtBU,GAAGwH,EAAOpJ,KAAK4B,GACfH,KAAK2H,EAAOpJ,KAAKyB,KACjBrC,MAAMgK,EAAOpJ,KAAKZ,MAClB0C,SAASsH,EAAOpJ,KAAK8B,SACrBE,YAAYoH,EAAOpJ,KAAKgC,YACxBI,QAAO,IAEf,IftBwB,mBeuBpB,OAAO4G,EAAa9H,EAAM,CACtBO,KAAK2H,EAAOpJ,KAAKyB,KACjBK,SAASsH,EAAOpJ,KAAK8B,SACrBE,YAAYoH,EAAOpJ,KAAKgC,cAEhC,If3BmB,ce4Bf,OAAOgH,EAAa9H,EAAM,CACtBU,GAAG,EACHH,KAAK,GACLrC,MAAM,GACN0C,SAAS,GACTE,YAAY,GACZI,QAAO,IAEf,QACI,OAAOlB,I,SCpCbiI,GAAmB,CACrB7I,MAAM,IAeKA,GAZD,WAAwC,IAAvCY,EAAsC,uDAA1BiI,GAAaC,EAAa,uCACjD,OAAQA,EAAOlJ,MACX,IhBNe,UgBOX,OAAO8I,EAAa9H,EAAM,CACtBZ,MAAM,aAAI8I,EAAO9I,SAEzB,QACI,OAAOY,ICXbiI,GAAmB,CACrB3E,SAAS,IAuBEG,GApBC,WAAwC,IAAvCzD,EAAsC,uDAA1BiI,GAAaC,EAAa,uCACnD,OAAQA,EAAOlJ,MACX,IjBLgB,WiBMZ,OAAO8I,EAAa9H,EAAM,CACtBsD,SAAS,GAAD,oBAAKtD,EAAMsD,UAAX,CAAoB4E,EAAO5I,SAE3C,IjBPqB,gBiBQjB,OAAOwI,EAAa9H,EAAM,CACtBsD,SAAS4E,EAAO5I,OAExB,IjBVmB,ciBWf,OAAOwI,EAAa9H,EAAM,CACtBsD,SAAS,KAEjB,QACI,OAAOtD,ICnBbiI,GAAmB,CACrBzI,KAAK,IAeMA,GAZF,WAAwC,IAAvCQ,EAAsC,uDAA1BiI,GAAaC,EAAa,uCAChD,OAAQA,EAAOlJ,MACX,IlBJgB,WkBKZ,OAAO8I,EAAa9H,EAAM,CACtBR,KAAK0I,EAAO1I,OAEpB,QACI,OAAOQ,ICXbiI,GAAmB,CACrBzE,cAAc,IAGZ3D,GAAkB,SAACG,EAAUF,GAE/B,OADAE,EAAM,GAAGF,GAAWE,EAAM,GAAGF,GAAW,EACjCE,GAoBIyD,GAjBC,WAAwC,IAAvCzD,EAAsC,uDAA1BiI,GAAaC,EAAa,uCACnD,OAAQA,EAAOlJ,MACX,InBNyB,oBmBOrB,OAAO8I,EAAa9H,EAAM,CACtBwD,cAAc,CAAC0E,EAAOtI,YAE9B,InBTwB,mBmBUpB,OAAOkI,EAAa9H,EAAM,CACtBwD,cAAc,GAAD,oBAAKxD,EAAMwD,eAAX,CAAyB3D,GAAgBG,EAAMwD,cAAc0E,EAAOpI,aAGzF,QACI,OAAOE,ICVbmI,GAAcC,YAAgB,CAClClI,KAAKA,GACLd,MAAMA,GACNkE,SAASA,GACT9D,KAAKA,GACLgE,cAAcA,KAcV6E,GAAoBzL,QAAWA,OAAe0L,sCAAyCC,IAEvFC,GAAQC,YAAYN,GAAaE,GAAiBK,aAbzC,SAACF,GACd,OAAO,SAACG,GACJ,OAAO,SAACT,GACJlL,QAAQC,IAAI,2BAA4BiL,GACxC,IAAMrJ,EAAS8J,EAAKT,GAEpB,OADAlL,QAAQC,IAAI,0BAA2BuL,EAAMI,YACtC/J,MAO+DgK,OAEhFC,IAASnL,OACP,kBAAC,IAAD,CAAU6K,MAAOA,IACf,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SPgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/K,MAAK,SAAAgL,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL9I,QAAQ8I,MAAMA,EAAMrC,a","file":"static/js/main.a1bf12ab.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface ISingInLogInProps {\r\n    auth:any\r\n}\r\n\r\nconst SingInLogIn: React.FunctionComponent<ISingInLogInProps> = (props) => {\r\n    return (\r\n        <div>\r\n            Hello from singin login\r\n            <button onClick={props.auth.login}>Log In</button>\r\n            <button onClick={props.auth.login}>Sing In</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SingInLogIn;\r\n","import React,{FC , useEffect} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\ninterface ICallBackProps {\r\n    auth:any,\r\n    location:any\r\n}\r\n\r\nconst CallBack:FC<ICallBackProps> = (props) => {\r\n    let history = useHistory();\r\n    useEffect(()=>{\r\n        if (/access_token|id_token|error/.test(window.location.hash)) {\r\n            console.log(history)\r\n            props.auth.handleAuthentication(history)\r\n            for (let [key, value] of Object.entries(localStorage)) {\r\n              if(key !== \"access_token\" && key !== \"id_token\" && key !== \"expires_at\" && key !== \"scopes\"){\r\n                  localStorage.removeItem(key)\r\n              }\r\n          }\r\n          } else {\r\n            throw new Error(\"Invalid callback URL.\");\r\n          }\r\n    },[])\r\n    return (\r\n        <div>\r\n            Loading...\r\n        </div>\r\n  )\r\n};\r\n\r\nexport default CallBack;\r\n","import  React ,{FC} from 'react';\r\nimport {Route,Switch, Redirect} from 'react-router-dom';\r\nimport SingInLogIn from \"../containers/SingInLogIn\"\r\nimport CallBack from \"../containers/CallBack\"\r\nimport Main from \"../containers/Main\";\r\n\r\ninterface IGreetingProps {\r\n    auth:any,\r\n    location:any\r\n}\r\n\r\nconst Greeting:FC<IGreetingProps> = (props:IGreetingProps) => {\r\n    const auth = props.auth\r\n    return( \r\n        <Switch>\r\n            <Route path=\"/\" exact render={props => auth.isAuthenticated() ? (\r\n                    <Redirect to=\"/about\"/>\r\n                ):(\r\n                    <SingInLogIn auth={auth}/>\r\n                )\r\n            }/>\r\n        \r\n            <Route path=\"/callback\" exact>\r\n                <CallBack auth={props.auth} {...props}/>\r\n            </Route>\r\n        </Switch>\r\n    )\r\n};\r\n\r\nexport default Greeting;\r\n","import * as React from 'react';\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\ninterface IHeaderProps {\r\n    auth:any\r\n}\r\n\r\nconst Header: React.FunctionComponent<IHeaderProps> = (props) => {\r\n    return (\r\n        <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            \r\n                <ul className=\"navbar-nav\">        \r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/main\">Main</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n                    </li>\r\n                    <button className=\"nav-item\" onClick={()=>props.auth.logout()}>\r\n                        LogOut\r\n                    </button>\r\n                </ul>\r\n           \r\n        </nav>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\"\r\n\r\nexport const createUser = (user:any) => axios.post(\"/api/users/create\",user).then((res:any)=>res)\r\n\r\nexport const isUserExist = (email:any) => \r\n    axios.get(\"/api/users/search/\"+email,email).then( (res)=>{\r\n    console.log(\"resultFull\"+res)\r\n    return res\r\n})\r\n\r\nexport const updateUser = (userData:any) => axios.put(\"/api/users/updateUser\",userData).then((res)=>res.data)\r\n\r\nexport const deleteUserAcount = (id:any) => axios.delete(\"/api/users/deleteUser/\"+id,id).then((res)=>res.status)\r\n\r\nexport const getUsers = () => axios.get(\"/api/users/getAll\").then((res)=>res.data)\r\n\r\nexport const createOrSearchChat = (id1:any,id2:any) => axios.get(\"/api/rooms/getRoom/\"+id1+\"/\"+id2).then((res)=>res.data)\r\n\r\nexport const getChatUsers = (email:any) => axios.get(\"/api/rooms/getRoomsUsers/\"+email,email).then((res)=>res.data)\r\n\r\nexport const getChatMessages = (room:any) => axios.get(\"/api/rooms/getRoomsMessages/\"+room,room).then((res)=>res.data[0].messages)\r\n\r\nexport const updateMess = (messData:any) => axios.put(\"/api/rooms/updateMess\",messData).then((res)=>res.data)","import {isUserExist} from \"../api/userApi\"\r\n\r\n export const userAuth = async (profile:any) =>{\r\n        console.log(!profile.email_vefified)\r\n        if(profile.email_verified){\r\n            return true            \r\n        }else{\r\n            return false\r\n        }\r\n}\r\n\r\nexport const getUser = async (email:any) =>{ \r\n    const result = await isUserExist(email)\r\n    return await result.data\r\n}","import * as actionTypes from './actionTypes';\r\n\r\nexport const setUserData = (data:any) => {\r\n    return {\r\n        type: actionTypes.SET_USER_DATA,\r\n        data:data\r\n    };\r\n};\r\n\r\nexport const updateUserData = (data:any) => {\r\n    return {\r\n        type: actionTypes.UPDATE_USER_DATA,\r\n        data:data\r\n    };\r\n};\r\n\r\nexport const deleteUser = () => {\r\n    return {\r\n        type: actionTypes.DELETE_USER,\r\n    };\r\n};\r\n\r\nexport const getAllUsers = (users:any) => {\r\n    return {\r\n        type: actionTypes.GET_ALL,\r\n        users:users\r\n    };\r\n};\r\n\r\nexport const addMess = (mess:any) => {\r\n    return {\r\n        type: actionTypes.ADD_MESS,\r\n        mess:mess\r\n    };\r\n};\r\n\r\nexport const addRoom = (room:any) => {\r\n    return {\r\n        type: actionTypes.ADD_ROOM,\r\n        room:room\r\n    };\r\n};\r\n\r\nexport const addInitMess = (mess:any) => {\r\n    return {\r\n        type: actionTypes.ADD_INIT_MESS,\r\n        mess:mess\r\n    };\r\n};\r\n\r\nexport const removeMess = () => {\r\n    return {\r\n        type: actionTypes.REMOVE_MESS\r\n    }\r\n}\r\n\r\nexport const initNotification = (initData:any) => {\r\n    return {\r\n        type: actionTypes.INIT_NOTIFICATION,\r\n        initData:initData\r\n    }\r\n}\r\n\r\nexport const addNotification = (addData:any) => {\r\n    return {\r\n        type:actionTypes.ADD_NOTIFICATION,\r\n        addData:addData\r\n    }\r\n}","export const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const UPDATE_USER_DATA = 'UPDATE_USER_DATA';\r\nexport const DELETE_USER = 'DELETE_USER';\r\nexport const GET_ALL = 'GET_ALL';\r\nexport const ADD_MESS = 'ADD_MESS';\r\nexport const ADD_ROOM = 'ADD_ROOM';\r\nexport const ADD_INIT_MESS = 'ADD_INIT_MESS'\r\nexport const REMOVE_MESS = 'REMOVE_MESS'\r\nexport const INIT_NOTIFICATION = 'INIT_NOTIFICATION'\r\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION'","import React,{useEffect,useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from '../components/Header'\r\nimport {createUser,updateUser,deleteUserAcount} from \"../api/userApi\"\r\nimport {userAuth,getUser} from \"../services/auth.service\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setUserData,updateUserData,deleteUser} from \"../store/actions/actions\";\r\n\r\ninterface IAboutProps {\r\n    auth:any\r\n}\r\n\r\nconst About: React.FunctionComponent<IAboutProps> = (props:any) => {\r\n    const [user,setUser] = useState<any>('')\r\n    const [name,setName] = useState<any>('')\r\n    const [email,setEmail] = useState<any>('')\r\n    const [id,setId] = useState<any>('')\r\n    const [nickname,setNickname] = useState<any>('')\r\n    const [family_name,setFamilyName] = useState<any>('')\r\n    const [update,setUpdate] = useState<boolean>(false)\r\n\r\n    const history = useHistory()\r\n    useEffect(()=>{\r\n        if(!props.userInf.isAuth){\r\n            props.auth.getProfile((profile:any)=>{\r\n                setUser(profile)\r\n                const {email,nickname,name,family_name} = profile        \r\n                userAuth(profile).then((res:any)=> res ? \r\n                    getUser(email).then((res:any) => \r\n                        res.status!==404 ?\r\n                            showObject(res):\r\n                            createUser({email,nickname,name,family_name})).then(res=>{\r\n                                if(res === undefined){\r\n                                    console.log(\"error\")\r\n                                }else{\r\n                                    showObject(res.data)\r\n                                }\r\n                            })\r\n                \r\n                \r\n                : history.push('/verified'))\r\n                // .then((dat:any) => \r\n                //             userAuth(profile).then((res:any)=> res ? dat ? console.log(dat) :  console.log(\"heredata\"+dat)//createUser({email,nickname,name,family_name})\r\n                //         : history.push('/verified')))\r\n            })\r\n        }else{\r\n            showObject(props.userInf,true)\r\n        }\r\n    },[])\r\n\r\n    const showObject = (obg:any,idd:boolean = false)=>{\r\n        let userId\r\n        if(idd){\r\n            setId(obg.id)\r\n            console.log(\"hereTrue\")\r\n            userId=obg.id\r\n        }else{\r\n            setId(obg._id)\r\n            userId=obg._id\r\n        }\r\n    \r\n        setName(obg.name)\r\n        setEmail(obg.email)\r\n        setNickname(obg.nickname)\r\n        setFamilyName(obg.family_name)\r\n        console.log(obg)\r\n        let user = {name:obg.name,email:obg.email,nickname:obg.nickname,family_name:obg.family_name,id:userId}\r\n        props.setUserData(user)\r\n    }\r\n    const saveUpdates = () => {\r\n        updateUser({id,name,nickname,family_name}).then((res:any)=>\r\n            res.name ? \r\n            props.updateUserData({name:res.name,family_name:res.family_name,nickname:res.nickname})\r\n            :console.log('error')\r\n        ).then(()=>setUpdate(false))\r\n    }    \r\n    const canselUpdates = () => {\r\n        setName(props.userInf.name)\r\n        setNickname(props.userInf.nickname)\r\n        setFamilyName(props.userInf.family_name)\r\n        setUpdate(false)\r\n    }\r\n    const deleteAcount = () =>{\r\n        deleteUserAcount(id)\r\n        .then((status)=>{\r\n            status===200?props.deleteUser():console.log(\"error\")\r\n        })\r\n        .then(()=>{\r\n            props.auth.logout()\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Header auth={props.auth}/>\r\n            Hello from about\r\n            -{name}-{email}-{nickname}-{family_name}\r\n            <p>Your Account</p>\r\n            <p>Name -- {name}</p>\r\n            {update ? <input value={name} name=\"name\" onChange={(e:any)=> setName(e.target.value)}/>:<></>}\r\n            <p>Surname -- {family_name}</p>\r\n            {update ? <input value={family_name} name=\"family_name\" onChange={(e:any)=> setFamilyName(e.target.value)}/>:<></>}\r\n            <p>Nickname -- {nickname} users can find you</p>\r\n            {update ? <input value={nickname} name=\"nickname\" onChange={(e:any)=> setNickname(e.target.value)}/>:<></>}\r\n            { update ? <><button onClick={saveUpdates}>Save</button><button onClick={canselUpdates}>Cansel</button></>: <button onClick={()=> setUpdate(true)}>Update</button> }\r\n            <p>Danger Zone</p>\r\n            <button onClick={deleteAcount}>DELETE ACOUNT</button>   \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:any} ) => {\r\n    return {\r\n        userInf:state.user\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n           setUserData,\r\n           updateUserData,\r\n           deleteUser\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(About);\r\n","import React,{useState, useEffect} from 'react';\r\nimport {getUsers,createOrSearchChat} from \"../api/userApi\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {getAllUsers} from \"../store/actions/actions\";\r\n\r\ninterface IUsersProps {\r\n  startChat:any\r\n}\r\n\r\nconst Users: React.FunctionComponent<IUsersProps> = (props:any) => {\r\n    const [inetialUsers, setInitial] = useState<any>([])\r\n    const [filterUsers, setFilterUsers] = useState<any>([])\r\n    \r\n    useEffect(()=>{\r\n        getUsers()\r\n        .then((arr) => {\r\n            props.getAllUsers(arr)\r\n            setInitial(arr.filter((el:any)=> el.email !== props.userInf.email))\r\n        })\r\n    },[])\r\n    \r\n    const filterUsersInput = (event:any) =>{\r\n        const updatedList = inetialUsers.filter(function(item:any){\r\n          return item.nickname.toLowerCase().search(\r\n            event.target.value.toLowerCase()) !== -1;\r\n        });\r\n        if(event.target.value === ''){\r\n            setFilterUsers([])\r\n        }else{\r\n            setFilterUsers(updatedList)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder=\"Search user\" onChange={filterUsersInput}/>\r\n            {filterUsers.map((el:any)=>{return <><p>{el.nickname}</p><button onClick={()=>props.startChat(el.email)}>Chat+</button></>})}\r\n            {/* {props.users.map((el:any)=>{return <><p>{el.nickname}</p><button onClick={()=>props.startChat(el.email)}>Chat+</button></>})} */}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:any,users:any} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getAllUsers\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Users);\r\n//  export default Users","import React,{useState, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addRoom,addInitMess} from \"../store/actions/actions\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {getChatMessages} from '../api/userApi'\r\nimport {findUser} from '../services/users.service'\r\n\r\ninterface IChatItemProps {\r\n    data:any\r\n}\r\n\r\nconst ChatItem: React.FunctionComponent<IChatItemProps> = (props:any) => {\r\n    const [item,setItem] = useState<any>([])\r\n    const [message,setMess] = useState<any>([])\r\n    const [users,setUsers] = useState<any>('')\r\n    const [room,setRoom] = useState<any>('')\r\n    let history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        setRoom(props.data.room)\r\n        setMess(props.data.messages)\r\n        if(props.data.users[0] === props.userInf.email){\r\n            setUsers(props.data.users[1])\r\n        }else{\r\n            setUsers(props.data.users[0])\r\n        }\r\n    },[])\r\n\r\n    const chatGo = () => {\r\n        if(props.notification[0][room] !== 0){\r\n            getChatMessages(room).then((mes)=>{\r\n                console.log(\"mmmmmeeeessss\"+mes)\r\n                props.addInitMess(mes)        \r\n            })\r\n        }else{\r\n            props.addInitMess(message)\r\n        }\r\n        console.log(\"hereMess\"+props.data)\r\n        props.addRoom(room)\r\n        history.push('/chat')\r\n    }\r\n    return (\r\n        <div>\r\n            <p>\r\n                {findUser(props.userAll,users)}\r\n            </p>\r\n            <button onClick={chatGo}>Go Chat</button>\r\n            <p>{props.notification.length === 0? <></>:<>{props.notification[0][room]}</>}\r\n            </p>\r\n            \r\n    \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:any,users:any,messages:any,notifications:any} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users,\r\n        mess:state.messages.messages,\r\n        notification:state.notifications.notifications\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addInitMess,\r\n            addRoom\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatItem);\r\n","export const findUser = (userAll:any,users:any)  => {\r\n    const findUserName = userAll.filter((el:any)=> el.email === users )\r\n    console.log(findUserName[0]+\"9090909090909090909\")\r\n    return findUserName.length === 0 ?'': findUserName[0].name\r\n}\r\n        \r\n        ","\r\nexport const connectToServer = (socket:any,email:any,room:any) =>{\r\n    if(localStorage.getItem(`${email}${room}`) === null || localStorage.getItem(`${email}${room}`) === 'false'){\r\n        socket.emit('new-user', room)\r\n        console.log(\"11111111111111\")\r\n        localStorage.setItem(`${email}${room}`,'true')\r\n    }\r\n}","import React,{useState, useEffect} from 'react';\r\nimport {getChatUsers} from \"../api/userApi\"\r\nimport ChatItem from '../components/ChatItem'\r\nimport socketIOClient from 'socket.io-client'\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addMess, removeMess,initNotification,addNotification} from \"../store/actions/actions\";\r\nimport {connectToServer} from '../services/socket.service'\r\n\r\n\r\ninterface IUsersProps {\r\n    email:any\r\n}\r\n\r\nconst ChatList: React.FunctionComponent<IUsersProps> = (props:any) => {\r\n    const [data,setData] = useState<any>([])\r\n    const [endpoint,setEndpoint] = useState(`https://practick.herokuapp.com/`)\r\n    const socket = socketIOClient(endpoint);\r\n\r\n    useEffect(()=>{\r\n        getChatUsers(props.email).then(res=>{\r\n            setData(res)\r\n            const dat:any={}\r\n            res.map((el:any)=>{\r\n                connectToServer(socket,props.email,el.room)\r\n                dat[el.room]=0\r\n                // if(localStorage.getItem(`${props.email}${el.room}`) === null || localStorage.getItem(`${props.email}${el.room}`) === 'false'){\r\n                //     socket.emit('new-user', el.room)\r\n                //     console.log(\"11111111111111\")\r\n                //     localStorage.setItem(`${props.email}${el.room}`,'true')\r\n                // }\r\n            })\r\n            props.initNotification(dat)\r\n            \r\n        })\r\n    },[])\r\n    \r\n\r\n    useEffect(()=>{\r\n        socket.on('chat-message', (data:any) => {\r\n            if(window.location.pathname === '/chat'){\r\n                console.log(\"herererere\"+data.message)\r\n                if(data.email !== props.userInf.email){\r\n                    props.addMess({mess:data.message,name:data.name})\r\n                }\r\n            }else{\r\n                props.addNotification(data.room)\r\n                alert(\"You have SMS from\"+data.name)\r\n                \r\n            }\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {data.map((el:any)=>{\r\n                return (\r\n                    <>\r\n                        <ChatItem data={el}/>\r\n                    </>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = ( state:{user:any,users:any,messages:any,room:any,notifications:any} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users,\r\n        mess:state.messages.messages,\r\n        roomChat:state.room.room,\r\n        notification:state.notifications.notifications\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addMess,removeMess,initNotification,addNotification\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatList);","import React,{useState, useEffect} from 'react';\r\nimport Header from '../components/Header'\r\nimport Chat from './Chat'\r\nimport {getUsers,createOrSearchChat} from \"../api/userApi\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {getAllUsers,addRoom} from \"../store/actions/actions\";\r\n// import { serialize } from 'v8';\r\n// import user from '../store/reducers/user';\r\nimport Users from './Users'\r\nimport ChatList from './ChatList'\r\nimport { useHistory } from 'react-router-dom';\r\nimport socketIOClient from 'socket.io-client'\r\n\r\ninterface IMainProps {\r\n  auth:any\r\n}\r\n\r\nconst Main: React.FunctionComponent<IMainProps> = (props:any) => {\r\n    // const [users,setUsers] = useState<any>([])\r\n    const [chat,setChat] = useState<boolean>(false)\r\n    const [room,setRoom] =useState<any>('')\r\n    // useEffect(()=>{\r\n    //     getUsers()\r\n    //     .then((arr) => {\r\n    //         props.getAllUsers(arr)\r\n    //         setUsers(arr.filter((el:any)=> el.email !== props.userInf.email))\r\n    //     })\r\n    // },[])\r\n    const [endpoint,setEndpoint] = useState(`https://practick.herokuapp.com/`)\r\n    const socket = socketIOClient(endpoint);\r\n    let history = useHistory();\r\n    useEffect(()=>{\r\n        if(props.userInf.name===''){\r\n            for (let [key, value] of Object.entries(localStorage)) {\r\n                if(key !== \"access_token\" && key !== \"id_token\" && key !== \"expires_at\" && key !== \"scopes\"){\r\n                    localStorage.setItem(key,'false')\r\n                }\r\n            }\r\n            history.push('/about')\r\n        }\r\n\r\n        // if(localStorage.getItem(props.userInf.email) === null){\r\n        //     localStorage.setItem(props.userInf.email,'false')\r\n        // }        \r\n    },[])\r\n    const startChat = (nickname:any) =>{\r\n        const data ={\r\n            id1:nickname,\r\n            id2:props.userInf.email\r\n        }\r\n        console.log(\"chat\"+data)\r\n        createOrSearchChat(data.id1,data.id2).then((res)=>{\r\n            props.addRoom(res.room)\r\n        }).then(()=>{\r\n            history.push('/chat')\r\n        })\r\n\r\n    }\r\n    useEffect(()=>{\r\n        socket.on('chat-message', (data:any) => {\r\n            console.log(\"heredata121212121212\"+data)\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header auth={props.auth}/>\r\n                {/* {chat ? <Chat room={room} name={props.userInf.name}/>:\r\n                <>\r\n                    Hello from Main\r\n                    {users.map((el:any)=>{return <><p>{el.nickname}</p><button onClick={()=>startChat(el.email)}>Chat+</button></>})}\r\n                </>} */}\r\n                <Users startChat={startChat}/>\r\n\r\n                <ChatList email={props.userInf.email}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:any,users:any} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getAllUsers,\r\n            addRoom\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);\r\n// export default Main","import * as React from 'react';\r\n\r\ninterface IAuthPageProps {\r\n    auth:any\r\n}\r\n\r\nconst AuthPage: React.FunctionComponent<IAuthPageProps> = (props) => {\r\n  return (\r\n      <div>\r\n          Please verifide your account and log \r\n          <button onClick={()=>props.auth.login() }>Login</button>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default AuthPage;\r\n","import React,{useState, useEffect} from 'react';\r\n\r\nimport socketIOClient from 'socket.io-client'\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addMess, removeMess,addNotification} from \"../store/actions/actions\";\r\nimport Header from '../components/Header';\r\nimport { userInfo } from 'os';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {updateMess} from \"../api/userApi\"\r\nimport {connectToServer} from '../services/socket.service'\r\n\r\n//const socket = io.connect('http://localhost:5000')\r\ninterface IMainProps {\r\n    auth:any\r\n}\r\n\r\nconst Chat: React.FunctionComponent<IMainProps> = (props:any) => {\r\n    const [endpoint,setEndpoint] = useState(`https://practick.herokuapp.com/`)\r\n\r\n    const [mess,setMess] = useState('')\r\n    const [arrmess,setArrmess] = useState<any>([])\r\n    let history = useHistory();\r\n    const socket = socketIOClient(endpoint);\r\n\r\n    const sendMsg =()=>{\r\n        console.log(\"room\"+props.roomChat)\r\n        const socket = socketIOClient(endpoint);\r\n        props.addMess({mess,name:props.userInf.name})\r\n        socket.emit('send-chat-message', props.roomChat, mess, props.userInf.email, props.userInf.name)\r\n        let data = props.mess\r\n        data.push({mess,name:props.userInf.name})\r\n        console.log('66666666666666666666666')\r\n        updateMess({room:props.roomChat,mess:data})\r\n        setMess('')\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        connectToServer(socket,props.userInf.email,props.roomChat)\r\n        // if(localStorage.getItem(`${props.userInf.email}${props.roomChat}`) === 'false' || localStorage.getItem(`${props.userInf.email}${props.roomChat}`) === null){\r\n        //     socket.emit('new-user', props.roomChat)\r\n        //     localStorage.setItem(`${props.userInf.email}${props.roomChat}`,'true')\r\n        // }\r\n    },[])\r\n    // useEffect(()=>{\r\n    //     socket.on('user-connected', (data:any) => {\r\n    //         localStorage.setItem(data.room,'true')\r\n    //     })\r\n    // })\r\n    \r\n    useEffect(()=>{\r\n        socket.on('chat-message', (data:any) => {\r\n            console.log(\"heredata\"+arrmess)\r\n            console.log(\"herererere888888888888888888888888\"+history)\r\n            if(window.location.pathname === '/chat'){\r\n                if(data.email !== props.userInf.email){\r\n                    props.addMess({mess:data.message,name:data.name})\r\n                }\r\n            }else{\r\n                props.addNotification(data.room)\r\n                alert(\"You have SMS from\"+data.name)\r\n               \r\n            }\r\n        })\r\n    })\r\n        \r\n    const leaveRoom = () => {\r\n        //updateMess({room:props.roomChat,mess:props.mess})\r\n        props.removeMess()\r\n        history.push('/main')\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <button onClick={leaveRoom}>EXIT CHAT</button>\r\n            {props.roomChat}\r\n            {props.mess.map((el:any)=>{ \r\n                return <p>{el.name} -- {el.mess}</p>    \r\n            })}\r\n            <input value={mess} onChange={(e:any)=>setMess(e.target.value)}/>\r\n            <button onClick={sendMsg}>Send</button>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = ( state:{user:any,users:any,messages:any,room:any} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users,\r\n        mess:state.messages.messages,\r\n        roomChat:state.room.room\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addMess,removeMess,addNotification\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat);","import  React ,{FC} from 'react';\r\nimport {Route,Switch,Redirect} from 'react-router-dom';\r\nimport About from \"../containers/About\";\r\nimport Main from \"../containers/Main\";\r\nimport AuthPage from './AuthPage';\r\nimport Chat from '../containers/Chat'\r\n\r\ninterface IHomeProps {\r\n    auth:any\r\n}\r\n\r\nconst Home:FC<IHomeProps> = (props:IHomeProps) => {\r\n    const auth = props.auth\r\n    return (\r\n        <>\r\n        <Switch>\r\n            <Route path='/about' exact render={props => auth.isAuthenticated() ? (\r\n                    <About auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/main' exact render={props => auth.isAuthenticated() ? (\r\n                    <Main auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/verified' exact render={props => auth.isAuthenticated() ? (\r\n                    <AuthPage auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/chat' exact render={props => auth.isAuthenticated() ? (\r\n                    <Chat auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            \r\n        </Switch>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import auth0 from \"auth0-js\";\r\n\r\nexport default class Auth {\r\n  constructor(history) {\r\n    this.history = history;\r\n    this.userProfile = null;\r\n    this.requestedScopes = \"openid profile email read:courses\";\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: \"yurii-dubnytskyi.eu.auth0.com\",\r\n      clientID: \"Vlvnr3poW9Ors21ydAosVRRpVncQlvqS\",\r\n      redirectUri: `https://practick.herokuapp.com/callback`,\r\n      //redirectUri:`http://localhost:3000/callback`,\r\n      responseType: \"token id_token\",\r\n      scope: this.requestedScopes\r\n    });\r\n    console.log(this)\r\n  }\r\n\r\n  login = () => {\r\n    this.auth0.authorize();\r\n  };\r\n\r\n  handleAuthentication = (history) => {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        console.log(this)\r\n        history.push(\"/about\");\r\n      } else if (err) {\r\n        console.log(this)\r\n        history.push(\"/\");\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n        console.log(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  setSession = authResult => {\r\n    console.log(authResult);\r\n    // set the time that the access token will expire\r\n    const expiresAt = JSON.stringify(\r\n      authResult.expiresIn * 1000 + new Date().getTime()\r\n    );\r\n\r\n    // If there is a value on the `scope` param from the authResult,\r\n    // use it to set scopes in the session for the user. Otherwise\r\n    // use the scopes as requested. If no scopes were requested,\r\n    // set it to nothing\r\n    const scopes = authResult.scope || this.requestedScopes || \"\";\r\n\r\n    localStorage.setItem(\"access_token\", authResult.accessToken);\r\n    localStorage.setItem(\"id_token\", authResult.idToken);\r\n    localStorage.setItem(\"expires_at\", expiresAt);\r\n    localStorage.setItem(\"scopes\", JSON.stringify(scopes));\r\n  };\r\n\r\n  isAuthenticated() {\r\n    const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.removeItem(\"access_token\");\r\n    localStorage.removeItem(\"id_token\");\r\n    localStorage.removeItem(\"expires_at\");\r\n    localStorage.removeItem(\"scopes\");\r\n    this.userProfile = null;\r\n    this.auth0.logout({\r\n      clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\r\n      returnTo: `https://practick.herokuapp.com`\r\n      //returnTo: `http://localhost:3000`\r\n    });\r\n  };\r\n\r\n  getAccessToken = () => {\r\n    const accessToken = localStorage.getItem(\"access_token\");\r\n    if (!accessToken) {\r\n      throw new Error(\"No access token found.\");\r\n    }\r\n    return accessToken;\r\n  };\r\n\r\n  getProfile = cb => {\r\n    if (this.userProfile) return cb(this.userProfile);\r\n    this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\r\n      if (profile) this.userProfile = profile;\r\n      cb(profile, err);\r\n    });\r\n  };\r\n\r\n  userHasScopes(scopes) {\r\n    const grantedScopes = (\r\n      JSON.parse(localStorage.getItem(\"scopes\")) || \"\"\r\n    ).split(\" \");\r\n    return scopes.every(scope => grantedScopes.includes(scope));\r\n  }\r\n}\r\n","import React ,{FC}from 'react';\nimport { BrowserRouter,useHistory } from 'react-router-dom';\nimport Greeting from \"./pages/Greeting\"\nimport Home from \"./pages/Home\"\nimport Auth from \"./auth0/Auth\"\n\nconst App:FC<any> = (props:any) => {\n    let history = useHistory();\n    console.log(props.history)\n    const auth = new Auth(window.history)\n     return (\n        <div>\n            <BrowserRouter>\n                <Greeting auth={auth} {...props}/>\n                <Home auth={auth}/>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObject = (oldObject:any, updatedValues:any) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedValues\r\n    }\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState:any = {\r\n    id:0,\r\n    name:'',\r\n    email:'',\r\n    nickname:'',\r\n    family_name:'',\r\n    isAuth:false\r\n};\r\n\r\nconst user = (state:any = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.SET_USER_DATA:\r\n            return updateObject(state,{\r\n                id:action.data.id,\r\n                name:action.data.name,\r\n                email:action.data.email,\r\n                nickname:action.data.nickname,\r\n                family_name:action.data.family_name,\r\n                isAuth:true\r\n            })\r\n        case actionTypes.UPDATE_USER_DATA:\r\n            return updateObject(state,{\r\n                name:action.data.name,\r\n                nickname:action.data.nickname,\r\n                family_name:action.data.family_name,\r\n            })\r\n        case actionTypes.DELETE_USER:\r\n            return updateObject(state,{\r\n                id:0,\r\n                name:'',\r\n                email:'',\r\n                nickname:'',\r\n                family_name:'',\r\n                isAuth:false\r\n        })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default user","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState:any = {\r\n    users:[]\r\n};\r\n\r\nconst users = (state:any = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.GET_ALL:\r\n            return updateObject(state,{\r\n                users:[...action.users]\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default users","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState:any = {\r\n    messages:[]\r\n};\r\n\r\nconst message = (state:any = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_MESS:\r\n            return updateObject(state,{\r\n                messages:[...state.messages,action.mess]\r\n            })\r\n        case actionTypes.ADD_INIT_MESS:\r\n            return updateObject(state,{\r\n                messages:action.mess\r\n            })\r\n        case actionTypes.REMOVE_MESS:\r\n            return updateObject(state,{\r\n                messages:[]\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default message","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState:any = {\r\n    room:''\r\n};\r\n\r\nconst room = (state:any = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_ROOM:\r\n            return updateObject(state,{\r\n                room:action.room\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default room","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState:any = {\r\n    notifications:[]\r\n};\r\n\r\nconst addNotification = (state:any,addData:any) => {\r\n    state[0][addData] = state[0][addData] + 1\r\n    return state \r\n}\r\n\r\nconst message = (state:any = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.INIT_NOTIFICATION:\r\n            return updateObject(state,{\r\n                notifications:[action.initData]\r\n            })\r\n        case actionTypes.ADD_NOTIFICATION:\r\n            return updateObject(state,{\r\n                notifications:[...state.notifications,addNotification(state.notifications,action.addData)]\r\n            })\r\n        \r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default message","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport user from \"./store/reducers/user\"\r\nimport users from \"./store/reducers/users\"\r\nimport messages from \"./store/reducers/messages\"\r\nimport room from \"./store/reducers/room\"\r\nimport notifications from './store/reducers/notifications'\r\n\r\nconst rootReducer = combineReducers({\r\n  user:user,\r\n  users:users,\r\n  messages:messages,\r\n  room:room,\r\n  notifications:notifications\r\n});\r\n\r\nconst logger = (store:any) => {\r\n  return (next:any) => {\r\n      return (action:any) => {\r\n          console.log('[Middleware] Dispatching', action);\r\n          const result = next(action);\r\n          console.log('[Middleware] next state', store.getState());\r\n          return result;\r\n      }\r\n  }\r\n};\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}