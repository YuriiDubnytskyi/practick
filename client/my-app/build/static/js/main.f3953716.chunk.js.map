{"version":3,"sources":["components/SingInLogIn/SingInLogIn.tsx","components/Spinner/Spinner.tsx","containers/CallBack/CallBack.tsx","pages/Greeting.tsx","components/Header/Header.tsx","components/AboutInfo/AboutInfo.tsx","api/userApi.ts","services/auth.service.ts","store/actions/actions.ts","store/actions/actionTypes.ts","containers/About/About.tsx","components/UserItem/UserItem.tsx","containers/Users/Users.tsx","components/ChatItem/ChatItem.tsx","services/users.service.ts","services/socket.service.ts","containers/ChatList/ChatList.tsx","containers/Main/Main.tsx","components/AuthPage/AuthPage.tsx","components/ChatInfo/ChatInfo.tsx","containers/Chat/Chat.tsx","pages/Home.tsx","auth0/Auth.js","App.tsx","serviceWorker.ts","store/utility.ts","store/reducers/user.ts","store/reducers/users.ts","store/reducers/messages.ts","store/reducers/room.ts","store/reducers/notifications.ts","index.tsx"],"names":["SingInLogIn","props","useEffect","className","onClick","auth","login","Spinner","CallBack","history","useHistory","test","window","location","hash","Error","console","log","handleAuthentication","Object","entries","localStorage","key","removeItem","Greeting","path","exact","render","isAuthenticated","to","Header","id","logout","AboutInfo","name","update","value","onChange","e","setName","target","family_name","setFamilyName","nickname","setNickname","saveUpdates","canselUpdates","setUpdate","deleteAcount","isUserExist","email","axios","get","then","res","addNotificationServer","room","post","userAuth","profile","a","email_vefified","email_verified","getUser","result","data","setUserData","type","updateUserData","deleteUser","getAllUsers","users","addMess","mess","addRoom","addInitMess","removeMess","initNotification","initData","addNotification","addData","connect","state","userInf","user","dispatch","bindActionCreators","useState","setId","isAuth","id_notifications","OneSignal","getUserId","showObject","getProfile","status","undefined","push","obg","userId","idd","_id","userData","put","delete","deleteUserAcount","UserItem","startChat","inetialUsers","setInitial","filterUsers","setFilterUsers","arr","filter","el","placeholder","event","updatedList","item","toLowerCase","search","map","userAll","notification","notifications","message","setMess","setUsers","setRoom","messages","findUserName","length","findUser","chatGo","connectToServer","socket","getItem","emit","setItem","setData","endpoint","socketIOClient","forEach","getNotification","on","pathname","alert","getChatMessages","mes","id1","id2","createOrSearchChat","AuthPage","ChatInfo","leaveRoom","chatUser","rows","onKeyPress","keyPressed","sendMsg","roomChat","setUserChat","messData","userEmail","replace","userE","deleteNotificationServer","Home","Auth","auth0","authorize","parseHash","err","authResult","accessToken","idToken","setSession","error","expiresAt","JSON","stringify","expiresIn","Date","getTime","scopes","scope","requestedScopes","userProfile","clientID","returnTo","getAccessToken","cb","client","userInfo","this","WebAuth","domain","redirectUri","responseType","parse","grantedScopes","split","every","includes","App","Boolean","hostname","match","updateObject","oldObject","updatedValues","initialState","action","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","getState","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f3953716.chunk.js","sourcesContent":["import  React,{useEffect} from 'react';\r\nimport './SingInLogIn.css'\r\n\r\ninterface ISingInLogInProps {\r\n    auth:any\r\n}\r\ndeclare global {\r\n    interface Window { OneSignal: any; }\r\n}\r\n\r\nconst SingInLogIn: React.FunctionComponent<ISingInLogInProps> = (props) => {\r\n    useEffect(()=>{\r\n        // window.OneSignal = window.OneSignal || [];\r\n        // window.OneSignal.push(function() {\r\n        //   window.OneSignal.init({\r\n        //     appId: \"890ecd33-a1e8-443b-8489-0d76bfdd453a\",\r\n        //   });\r\n        // });\r\n        \r\n       \r\n    },[])\r\n    return (\r\n        <>\r\n            <div className=\"wrapper\">\r\n                <div className=\"main-content\">\r\n                    <div className='main-content_container'>\r\n                        <h1 className='title'>Hello, Wanderer!</h1>\r\n                        <p className='sub-title'>Sign In or Sign Up and start journey with us.</p>       \r\n                        <button className='btn-login' onClick={props.auth.login}>Sign In</button><br/>\r\n                        <button className='btn-singin' onClick={props.auth.login}>Sign Up</button>\r\n                   </div>\r\n                </div>\r\n\r\n                <ul className=\"circles\">\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='square'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                    <li className='circle'></li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SingInLogIn;\r\n","import * as React from 'react';\r\nimport './Spinner.css'\r\n\r\ninterface ISpinnerProps {\r\n}\r\n\r\nconst Spinner: React.FunctionComponent<ISpinnerProps> = (props:ISpinnerProps) => {\r\n  return (\r\n        <div className='wrapper-loading'>\r\n            <div className=\"fancy-spinner\">\r\n                <div className=\"ring\"></div>\r\n                <div className=\"ring\"></div>\r\n                <div className=\"dot\"></div>\r\n            </div>\r\n        </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React,{FC , useEffect} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner/Spinner'\r\n\r\ninterface ICallBackProps {\r\n    auth:any,\r\n    location:any\r\n}\r\n\r\nconst CallBack:FC<ICallBackProps> = (props) => {\r\n    let history = useHistory();\r\n    useEffect(()=>{\r\n        if (/access_token|id_token|error/.test(window.location.hash)) {\r\n            console.log(history)\r\n            props.auth.handleAuthentication(history)\r\n            for (let [key] of Object.entries(localStorage)) {\r\n              if(key !== \"access_token\" && key !== \"id_token\" && key !== \"expires_at\" && key !== \"scopes\"){\r\n                  localStorage.removeItem(key)\r\n              }\r\n          }\r\n          } else {\r\n            throw new Error(\"Invalid callback URL.\");\r\n          }\r\n    },[])\r\n    return (\r\n        <Spinner/>\r\n  )\r\n};\r\n\r\nexport default CallBack;\r\n","import  React ,{FC} from 'react';\r\nimport {Route,Switch, Redirect} from 'react-router-dom';\r\nimport SingInLogIn from \"../components/SingInLogIn/SingInLogIn\"\r\nimport CallBack from \"../containers/CallBack/CallBack\"\r\n\r\ninterface IGreetingProps {\r\n    auth:any,\r\n    location:any\r\n}\r\n\r\nconst Greeting:FC<IGreetingProps> = (props:IGreetingProps) => {\r\n    const auth = props.auth\r\n    return( \r\n        <Switch>\r\n            <Route path=\"/\" exact render={props => auth.isAuthenticated() ? (\r\n                    <Redirect to=\"/about\"/>\r\n                ):(\r\n                    <SingInLogIn auth={auth}/>\r\n                )\r\n            }/>\r\n        \r\n            <Route path=\"/callback\" exact>\r\n                <CallBack auth={props.auth} {...props}/>\r\n            </Route>\r\n        </Switch>\r\n    )\r\n};\r\n\r\nexport default Greeting;\r\n","import * as React from 'react';\r\nimport {NavLink} from \"react-router-dom\"\r\nimport \"./Header.css\"\r\n\r\ninterface IHeaderProps {\r\n    auth:any\r\n}\r\n\r\nconst Header: React.FunctionComponent<IHeaderProps> = (props) => {\r\n    return (\r\n        <header className=\"container-h\" id=\"home\">\r\n            <section className=\"container__header\">\r\n                <div className=\"logo\"><p className=\"logo__text\">WebChat</p></div>\r\n                <nav className=\"navigation\">\r\n                    <ul className=\"navigation__list\">\r\n                        <li className=\"navigation__list-item\"><NavLink to='/main' className=\"navigation__list-link\">Main</NavLink></li>\r\n                        <li className=\"navigation__list-item\"><NavLink to='/about' className=\"navigation__list-link\">About</NavLink></li>\r\n                        <li className=\"navigation__list-item\"><a onClick={()=>props.auth.logout()} className=\"navigation__list-link\">LogOut</a></li>  \r\n                    </ul>\r\n                </nav>\r\n            </section>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import * as React from 'react';\r\nimport \"./AboutInfo.css\"\r\n\r\ninterface IAboutInfoProps {\r\n    update:boolean,\r\n    family_name:string,\r\n    name:string,\r\n    nickname:string,\r\n    setName:Function,\r\n    setFamilyName:Function,\r\n    setNickname:Function,\r\n    saveUpdates:Function,\r\n    setUpdate:Function,\r\n    canselUpdates:Function,\r\n    deleteAcount:Function\r\n}\r\n\r\nconst AboutInfo: React.FunctionComponent<IAboutInfoProps> = (props:IAboutInfoProps) => {\r\n  return (\r\n            <div className='wrapper_about'> \r\n                <div className='about-container'>\r\n                    <div>\r\n                        <p className='title'>Your Account</p>\r\n                        <p className='user-value'>Name -- {props.name}</p>\r\n                        {props.update \r\n                                ?<input \r\n                                    className='user-value_input' \r\n                                    value={props.name} \r\n                                    name=\"name\" \r\n                                    onChange={(e:any)=> props.setName(e.target.value)}/>\r\n                                :<></>\r\n                                }\r\n                        <p className='user-value'>Surname -- {props.family_name}</p>\r\n                        {props.update \r\n                                ? <input \r\n                                    className='user-value_input' \r\n                                    value={props.family_name} \r\n                                    name=\"family_name\" \r\n                                    onChange={(e:any)=> props.setFamilyName(e.target.value)}/>\r\n                                :<></>\r\n                                }\r\n                        <p className='user-value'>Nickname -- {props.nickname} users can find you</p>\r\n                        {props.update \r\n                                ? <input \r\n                                    className='user-value_input' \r\n                                    value={props.nickname} \r\n                                    name=\"nickname\" \r\n                                    onChange={(e:any)=> props.setNickname(e.target.value)}/>\r\n                                :<></>}\r\n                        {props.update \r\n                            ? <>\r\n                                <br/>\r\n                                <button className='btn btn--save' onClick={()=>props.saveUpdates()}>Save</button>\r\n                                <button className='btn btn--cansel' onClick={()=>props.canselUpdates()}>Cancel</button>\r\n                            </>\r\n                            : <button className='btn btn--update' onClick={()=> props.setUpdate(true)}>Update</button> }\r\n                    </div>\r\n                    <div className='delete-container'>\r\n                        <p className='sub-title'>Danger Zone</p>\r\n                        <button  className='btn btn--delete' onClick={()=>props.deleteAcount()}>DELETE ACOUNT</button> \r\n                    </div> \r\n                </div>\r\n            </div>\r\n        )\r\n};\r\n\r\nexport default AboutInfo;\r\n","import axios from \"axios\"\r\nimport {\r\n    TcreateOrSearchChat,\r\n    TcreateUser,\r\n    TupdateMess,\r\n    TupdateUser,\r\n    TcreateNotifi,\r\n    TaddNotifi\r\n} from './userApiTypes'\r\n\r\nexport const createUser = (user:TcreateUser) => axios.post(\"/api/users/create\",user).then((res:any) => res)\r\n\r\nexport const isUserExist = (email:string) => \r\n    axios.get(\"/api/users/search/\"+email).then( (res)=>{\r\n    console.log(\"resultFull\"+res)\r\n    return res\r\n})\r\n\r\nexport const updateUser = (userData:TupdateUser) => axios.put(\"/api/users/updateUser\",userData).then((res) => res.data)\r\n\r\nexport const deleteUserAcount = (id:string|undefined) => axios.delete(\"/api/users/deleteUser/\"+id).then((res) => res.status)\r\n\r\nexport const getUsers = () => axios.get(\"/api/users/getAll\").then((res)=>res.data)\r\n\r\nexport const createOrSearchChat = ({id1,id2}:TcreateOrSearchChat) => axios.get(\"/api/rooms/getRoom/\"+id1+\"/\"+id2).then((res) => res.data)\r\n\r\nexport const getChatUsers = (email:string) => axios.get(\"/api/rooms/getRoomsUsers/\"+email).then((res) => res.data)\r\n\r\nexport const getChatMessages = (room:string) => axios.get(\"/api/rooms/getRoomsMessages/\"+room).then((res) => res.data[0].messages)\r\n\r\nexport const updateMess = (messData:TupdateMess) => axios.put(\"/api/rooms/updateMess\",messData).then((res) => res.data)\r\n\r\n//export const createNotification = (notifiData:TcreateNotifi) => axios.post(\"/api/notifications/createNotifications\",notifiData).then((res:any) => res)\r\n\r\nexport const getNotification = (email:string) => axios.get(\"/api/notifications/getNotification/\"+email).then((res) => res.data)\r\n\r\nexport const addNotificationServer = ({email,room}:TaddNotifi) => axios.post(\"/api/notifications/addNotification/\"+email+\"/\"+room).then((res) => res)\r\n\r\nexport const deleteNotificationServer = ({email,room}:TaddNotifi) => axios.delete(\"/api/notifications/deleteNotification/\"+email+\"/\"+room).then((res) => res)","import {isUserExist} from \"../api/userApi\"\r\n\r\nexport const userAuth = async (profile:any) =>{\r\n        console.log(!profile.email_vefified)\r\n        if(profile.email_verified){\r\n            return true            \r\n        }else{\r\n            return false\r\n        }\r\n}\r\n\r\nexport const getUser = async (email:string) =>{ \r\n    const result = await isUserExist(email)\r\n    return await result.data\r\n}","import * as actionTypes from './actionTypes';\r\n\r\nexport const setUserData = (data:any) => {\r\n    return {\r\n        type: actionTypes.SET_USER_DATA,\r\n        data:data\r\n    };\r\n};\r\n\r\nexport const updateUserData = (data:any) => {\r\n    return {\r\n        type: actionTypes.UPDATE_USER_DATA,\r\n        data:data\r\n    };\r\n};\r\n\r\nexport const deleteUser = () => {\r\n    return {\r\n        type: actionTypes.DELETE_USER,\r\n    };\r\n};\r\n\r\nexport const getAllUsers = (users:any) => {\r\n    return {\r\n        type: actionTypes.GET_ALL,\r\n        users:users\r\n    };\r\n};\r\n\r\nexport const addMess = (mess:any) => {\r\n    return {\r\n        type: actionTypes.ADD_MESS,\r\n        mess:mess\r\n    };\r\n};\r\n\r\nexport const addRoom = (room:any) => {\r\n    return {\r\n        type: actionTypes.ADD_ROOM,\r\n        room:room\r\n    };\r\n};\r\n\r\nexport const addInitMess = (mess:any) => {\r\n    return {\r\n        type: actionTypes.ADD_INIT_MESS,\r\n        mess:mess\r\n    };\r\n};\r\n\r\nexport const removeMess = () => {\r\n    return {\r\n        type: actionTypes.REMOVE_MESS\r\n    }\r\n}\r\n\r\nexport const initNotification = (initData:any) => {\r\n    return {\r\n        type: actionTypes.INIT_NOTIFICATION,\r\n        initData:initData\r\n    }\r\n}\r\n\r\nexport const addNotification = (addData:any) => {\r\n    return {\r\n        type:actionTypes.ADD_NOTIFICATION,\r\n        addData:addData\r\n    }\r\n}","export const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const UPDATE_USER_DATA = 'UPDATE_USER_DATA';\r\nexport const DELETE_USER = 'DELETE_USER';\r\nexport const GET_ALL = 'GET_ALL';\r\nexport const ADD_MESS = 'ADD_MESS';\r\nexport const ADD_ROOM = 'ADD_ROOM';\r\nexport const ADD_INIT_MESS = 'ADD_INIT_MESS'\r\nexport const REMOVE_MESS = 'REMOVE_MESS'\r\nexport const INIT_NOTIFICATION = 'INIT_NOTIFICATION'\r\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION'","import React,{useEffect,useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from '../../components/Header/Header'\r\nimport AboutInfo from '../../components/AboutInfo/AboutInfo'\r\nimport {createUser,updateUser,deleteUserAcount} from \"../../api/userApi\"\r\nimport {userAuth,getUser} from \"../../services/auth.service\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setUserData,updateUserData,deleteUser} from \"../../store/actions/actions\";\r\nimport {IUserRedux} from '../../interfaces/IRedux'\r\n\r\n\r\ninterface IAboutProps {\r\n    auth:any,\r\n    userInf:IUserRedux,\r\n    setUserData:Function,\r\n    updateUserData:Function,\r\n    deleteUser:Function\r\n}\r\n\r\ntype TshowData = {\r\n    email: string,\r\n    family_name: string,\r\n    name: string,\r\n    nickname: string,\r\n    __v?: number,\r\n    _id?: string,\r\n    id?: string,\r\n    status?:number\r\n}\r\n\r\ntype TresUpdateData = {\r\n    email: string,\r\n    family_name: string,\r\n    name: string,\r\n    nickname: string,\r\n    __v: number,\r\n    _id: string,\r\n    comment?:string,\r\n    status?:number\r\n}\r\n\r\nconst About: React.FunctionComponent<IAboutProps> = (props:IAboutProps) => {\r\n    const [name,setName] = useState<string>('')\r\n    const [id,setId] = useState<string|undefined>('')\r\n    const [nickname,setNickname] = useState<string>('')\r\n    const [family_name,setFamilyName] = useState<string>('')\r\n    const [update,setUpdate] = useState<boolean>(false)\r\n\r\n    const history = useHistory()\r\n    useEffect(()=>{\r\n        if(!props.userInf.isAuth){\r\n            props.auth.getProfile((profile:any)=>{\r\n                \r\n                const {email,nickname,name,family_name} = profile        \r\n                const id_notifications = window.OneSignal.getUserId()\r\n                userAuth(profile).then((res:boolean)=> res ? \r\n                    getUser(email).then((res:TshowData) => \r\n                        res.status!==404 ?\r\n                            showObject(res,id_notifications):\r\n                            createUser({email,nickname,name,family_name,id_notifications})).then(res=>{\r\n                                if(res === undefined){\r\n                                    console.log(\"error\")\r\n                                }else{\r\n                                    showObject(res.data,id_notifications)\r\n                                }\r\n                            })\r\n                \r\n                \r\n                : history.push('/verified'))\r\n    \r\n            })\r\n        }else{\r\n            const id_notifications = window.OneSignal.getUserId()\r\n            showObject(props.userInf,id_notifications,true)\r\n        }\r\n    },[])\r\n\r\n    const showObject = (obg:TshowData,id_notifications:string,idd:boolean = false)=>{\r\n        let userId\r\n        if(idd){\r\n            setId(obg.id)\r\n            userId=obg.id\r\n        }else{\r\n            setId(obg._id)\r\n            userId=obg._id\r\n        }\r\n    \r\n        setName(obg.name)\r\n        setNickname(obg.nickname)\r\n        setFamilyName(obg.family_name)\r\n      \r\n        let user = {name:obg.name,email:obg.email,nickname:obg.nickname,family_name:obg.family_name,id:userId,id_notifications}\r\n        props.setUserData(user)\r\n    }\r\n\r\n    const saveUpdates = () => {\r\n        updateUser({id,name,nickname,family_name}).then((res:TresUpdateData)=>\r\n            res.name ? \r\n            props.updateUserData({name:res.name,family_name:res.family_name,nickname:res.nickname})\r\n            :console.log('error')\r\n        ).then(()=>setUpdate(false))\r\n    }  \r\n\r\n    const canselUpdates = () => {\r\n        setName(props.userInf.name)\r\n        setNickname(props.userInf.nickname)\r\n        setFamilyName(props.userInf.family_name)\r\n        setUpdate(false)\r\n    }\r\n\r\n    const deleteAcount = () =>{\r\n        deleteUserAcount(id)\r\n        .then((status)=>{\r\n            status===200?props.deleteUser():console.log(\"error\")\r\n        })\r\n        .then(()=>{\r\n            props.auth.logout()\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Header auth={props.auth}/>\r\n            <AboutInfo\r\n                update = {update}\r\n                family_name = {family_name}\r\n                name = {name}\r\n                nickname = {nickname}\r\n                setName = {setName}\r\n                setFamilyName = {setFamilyName}\r\n                setNickname = {setNickname}\r\n                saveUpdates = {saveUpdates}\r\n                setUpdate = {setUpdate}\r\n                canselUpdates = {canselUpdates}\r\n                deleteAcount = {deleteAcount}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:IUserRedux} ) => {\r\n    return {\r\n        userInf:state.user\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n           setUserData,\r\n           updateUserData,\r\n           deleteUser\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(About);\r\n","import React from 'react';\r\nimport \"./UserItem.css\"\r\n\r\ninterface IUserItemProps {\r\n    nickname:string,\r\n    email:string,\r\n    startChat:Function\r\n}\r\n\r\nconst UserItem: React.FunctionComponent<IUserItemProps> = (props:any) => {\r\n    return (\r\n        <div className='user-chat'>\r\n            <p className='user-nickname'>{props.nickname}</p>\r\n            <button className='btn--speak' onClick={()=>props.startChat(props.email)}>Chat+</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserItem;","import React,{useState, useEffect} from 'react';\r\nimport {getUsers} from \"../../api/userApi\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {getAllUsers} from \"../../store/actions/actions\";\r\nimport UserItem from '../../components/UserItem/UserItem'\r\nimport \"./Users.css\"\r\nimport {IUserRedux} from '../../interfaces/IRedux'\r\n\r\ninterface IUsersProps {\r\n  startChat:Function,\r\n  userInf:IUserRedux,\r\n  getAllUsers:Function\r\n}\r\n\r\nconst Users: React.FunctionComponent<IUsersProps> = (props:IUsersProps) => {\r\n    const [inetialUsers, setInitial] = useState<{\r\n        email: string,\r\n        family_name: string,\r\n        name: string,\r\n        nickname: string,\r\n        __v: number,\r\n        id_notifications:string,\r\n        _id: string\r\n    }[]>([])\r\n    const [filterUsers, setFilterUsers] = useState<{\r\n        email: string,\r\n        family_name: string,\r\n        name: string,\r\n        nickname: string,\r\n        __v: number,\r\n        id_notifications:string,\r\n        _id: string\r\n    }[]>([])\r\n    \r\n    useEffect(()=>{\r\n        getUsers()\r\n        .then((arr) => {\r\n            props.getAllUsers(arr)\r\n            setInitial(arr.filter((el:any)=> el.email !== props.userInf.email))\r\n        })\r\n    },[])\r\n    \r\n    const filterUsersInput = (event:any) =>{\r\n        const updatedList = inetialUsers.filter((item:{\r\n            email: string,\r\n            family_name: string,\r\n            name: string,\r\n            nickname: string,\r\n            __v: number,\r\n            id_notifications:string,\r\n            _id: string\r\n        })=>{\r\n          return item.nickname.toLowerCase().search(\r\n            event.target.value.toLowerCase()) !== -1;\r\n        });\r\n        if(event.target.value === ''){\r\n            setFilterUsers([])\r\n        }else{\r\n            setFilterUsers(updatedList)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='users-container'>\r\n            <div className='search-users'>\r\n                <input className='' placeholder=\"Search user\" onChange={filterUsersInput}/>\r\n            </div>\r\n            <div className='line'></div>\r\n            {filterUsers.map((el:any)=>{return <UserItem nickname={el.nickname} startChat={props.startChat} email={el.email}/>})}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:IUserRedux} ) => {\r\n    return {\r\n        userInf:state.user\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getAllUsers\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Users);","import React,{useState, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addRoom,addInitMess} from \"../../store/actions/actions\";\r\nimport {findUser} from '../../services/users.service'\r\nimport {INotificationRedux,IUserRedux,IUsersRedux} from '../../interfaces/IRedux'\r\nimport {IChatItemProps} from '../../interfaces/IProps'\r\nimport './ChatItem.css'\r\n\r\nconst ChatItem: React.FunctionComponent<IChatItemProps> = (props:IChatItemProps) => {\r\n    const [message,setMess] = useState<{mess:string,name:string}[]>([])\r\n    const [users,setUsers] = useState<string>('')\r\n    const [room,setRoom] = useState<string>('')\r\n    \r\n    useEffect(()=>{\r\n        setRoom(props.data.room)\r\n        setMess(props.data.messages)\r\n        if(props.data.users[0] === props.userInf.email){\r\n            setUsers(props.data.users[1])\r\n        }else{\r\n            setUsers(props.data.users[0])\r\n        }\r\n        console.log(room+\"-----room\")\r\n    },[])\r\n\r\n    return (\r\n        <div className='chat-item-container'>\r\n            <div className='chat-info'>\r\n               <p className='chat-user'>\r\n                    {findUser(props.userAll,users)}\r\n                </p>\r\n                <p className='chat-nitification'>{<>{props.notification.map((el:any)=>{\r\n                    console.log(el.room)\r\n                    if(el.room == props.data.room){\r\n                        return <>{el.notifications}</>\r\n                    }\r\n                })}</>}\r\n                </p> \r\n            </div>\r\n            <button className='btn--startchat' onClick={()=>props.chatGo(room,message)}>Go Chat</button>  \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:IUserRedux,users:IUsersRedux,notifications:INotificationRedux} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users,\r\n        notification:state.notifications.notifications\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addInitMess,\r\n            addRoom\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatItem);\r\n","//ChatItem\r\nexport const findUser = (userAll:{\r\n    email: string,\r\n    family_name?: string,\r\n    name?: string,\r\n    nickname?: string,\r\n    __v: number,\r\n    _id: string\r\n}[],users:string)  => {\r\n    const findUserName = userAll.filter((el:any)=> el.email === users )\r\n    return findUserName.length === 0 ?'': findUserName[0].name\r\n}","export const connectToServer = (socket:any,email:string,room:string) =>{\r\n    if(localStorage.getItem(`${email}${room}`) === null || localStorage.getItem(`${email}${room}`) === 'false'){\r\n        socket.emit('leave-room',room)\r\n        socket.emit('new-user', room)\r\n        localStorage.setItem(`${email}${room}`,'true')\r\n    }\r\n}","import React,{useState, useEffect} from 'react';\r\nimport {getChatUsers,getChatMessages,getNotification,addNotificationServer} from \"../../api/userApi\"\r\nimport ChatItem from '../../components/ChatItem/ChatItem'\r\nimport socketIOClient from 'socket.io-client'\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addMess, removeMess,initNotification,addNotification,addInitMess,addRoom} from \"../../store/actions/actions\";\r\nimport {connectToServer} from '../../services/socket.service'\r\nimport './ChatList.css'\r\nimport { useHistory } from 'react-router-dom';\r\nimport {INotificationRedux,IMessagesRedux} from '../../interfaces/IRedux'\r\n\r\ninterface IChatListProps {\r\n    email:string,\r\n    notification:{\r\n        [key:string]:number\r\n    }[]|[],\r\n    addMess:Function, \r\n    removeMess:Function,\r\n    initNotification:Function,\r\n    addNotification:Function,\r\n    addInitMess:Function,\r\n    addRoom:Function\r\n}\r\n\r\nconst ChatList: React.FunctionComponent<IChatListProps> = (props:IChatListProps) => {\r\n    const [data,setData] = useState<any>([])\r\n    const [endpoint,setEndpoint] = useState(`https://practick.herokuapp.com/`)\r\n    //const [endpoint] = useState(`localhost:5000`)\r\n    const socket = socketIOClient(endpoint);\r\n    let history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        getChatUsers(props.email).then(res=>{\r\n            setData(res)\r\n            //const dat:any={}\r\n            res.forEach((el:any)=>{\r\n                connectToServer(socket,props.email,el.room)\r\n                //dat[el.room]=0\r\n            })\r\n            //props.initNotification(dat)\r\n        })\r\n        getNotification(props.email).then(res=>{\r\n            props.initNotification(res)\r\n        })\r\n    },[])\r\n    \r\n\r\n    useEffect(()=>{\r\n        socket.on('chat-message', (data:{ message: string,email:string,name:string,room:string}) => {\r\n            console.log(\"herelocation\"+window.location)\r\n            if(window.location.pathname === '/chat/'+data.room){\r\n                if(data.email !== props.email){\r\n                    props.addMess({mess:data.message,name:data.name})\r\n                }\r\n            }else{\r\n                addNotificationServer({email:props.email,room:data.room})\r\n                props.addNotification(data.room)\r\n                alert(\"You have SMS from\"+data.name)\r\n            }\r\n        })\r\n    })\r\n\r\n    const chatGo = (room:string,message:IMessagesRedux) => {\r\n        if(props.notification[0][room] != 0){\r\n            getChatMessages(room).then((mes:IMessagesRedux)=>{\r\n                props.addInitMess(mes)        \r\n            })\r\n        }else{\r\n            props.addInitMess(message)\r\n        }\r\n        props.addRoom(room)\r\n        history.push('/chat/'+room)\r\n    }\r\n\r\n    return (\r\n        <div className='chatlist-container'>\r\n            {data.map((el:any)=>{\r\n                return (\r\n                    <>\r\n                        <ChatItem data={el} chatGo={chatGo}/>\r\n                    </>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{notifications:INotificationRedux} ) => {\r\n    return {\r\n        notification:state.notifications.notifications\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addMess,removeMess,initNotification,addNotification,addInitMess,addRoom\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatList);","import React,{ useEffect} from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport {createOrSearchChat} from \"../../api/userApi\"\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {getAllUsers,addRoom,addInitMess} from \"../../store/actions/actions\";\r\nimport Users from '../Users/Users'\r\nimport ChatList from '../ChatList/ChatList'\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Main.css'\r\nimport {IUserRedux} from '../../interfaces/IRedux'\r\n\r\ninterface IMainProps {\r\n  auth:any,\r\n  userInf:IUserRedux,\r\n  getAllUsers:Function,\r\n  addRoom:Function,\r\n  addInitMess:Function\r\n}\r\n\r\nconst Main: React.FunctionComponent<IMainProps> = (props:IMainProps) => {\r\n    let history = useHistory();\r\n    useEffect(()=>{\r\n        if(props.userInf.name===''){\r\n            for (let [key] of Object.entries(localStorage)) {\r\n                if(key !== \"access_token\" && key !== \"id_token\" && key !== \"expires_at\" && key !== \"scopes\"){\r\n                    localStorage.setItem(key,'false')\r\n                }\r\n            }\r\n            history.push('/about')\r\n        }\r\n    },[])\r\n    const startChat = (nickname:string) =>{\r\n        const data ={\r\n            id1:nickname,\r\n            id2:props.userInf.email\r\n        }\r\n        createOrSearchChat({id1:data.id1,id2:data.id2}).then((res)=>{\r\n            props.addRoom(res.room)\r\n            props.addInitMess(res.messages)\r\n            return res\r\n        }).then((res)=>{\r\n            history.push('/chat/'+res.room)\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=''>\r\n            <Header auth={props.auth}/>\r\n            <div className='wrapper1'>\r\n                <div className='main-container'>    \r\n                    <Users startChat={startChat}/>\r\n                    <ChatList email={props.userInf.email}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{user:IUserRedux} ) => {\r\n    return {\r\n        userInf:state.user\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getAllUsers,\r\n            addRoom,\r\n            addInitMess\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);","import * as React from 'react';\r\nimport './AuthPage.css'\r\ninterface IAuthPageProps {\r\n    auth:any\r\n}\r\n\r\nconst AuthPage: React.FunctionComponent<IAuthPageProps> = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"main-content\">\r\n                <div className='main-content_container'>\r\n                    <h1 className='title'>Hello, Wanderer!</h1>\r\n                    <p className='sub-title'>Please verifide your account and log and start journey with us.</p>       \r\n                    <button className='btn-login' onClick={()=>props.auth.login()}>Log In</button>\r\n                    <div>\r\n                        <div className=\"infinite-rotate1\"></div> \r\n                        <div className=\"infinite-rotate2\"></div> \r\n                        <div className=\"infinite-rotate3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <ul className=\"circles\">\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='square'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n                <li className='circle'></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AuthPage;\r\n","import * as React from 'react';\r\nimport './ChatInfo.css'\r\n\r\ninterface IChatInfoProps {\r\n    leaveRoom:Function,\r\n    chatUser:string|undefined,\r\n    name:string,\r\n    mess:({\r\n        mess:string,\r\n        email:string\r\n    })[],\r\n    email:string,\r\n    message:string,\r\n    setMess:Function,\r\n    keyPressed:any,\r\n    sendMsg:Function\r\n}\r\n\r\nconst ChatInfo: React.FunctionComponent<IChatInfoProps> = (props:IChatInfoProps) => {\r\n  return (\r\n    <div className=''>\r\n        <header className='header-chat'>\r\n            <div className=\"logo1\"><p className=\"logo__text1\">WebChat</p></div>\r\n            <p className='header-p'>\r\n                <button className='header-btn' onClick={()=>props.leaveRoom()}>EXIT CHAT</button>\r\n            </p>\r\n            <div className=\"logo2\"><p className=\"logo__text2\">WebChat</p></div>\r\n        </header>  \r\n        \r\n        <div className='wrapper2'>\r\n            <p className='title-room'>{props.chatUser}---{props.name}</p>\r\n            <div className='chat-mess'>\r\n                {props.mess.map((el:any)=>{ \r\n                    if(el.email === props.email){\r\n                        return <p className='right-mess'>{el.mess}</p> \r\n                    }else{\r\n                        return <p className='left-mess'>{el.mess}</p> \r\n                    }   \r\n                })}\r\n            </div>\r\n            <div className='send-mess'>\r\n                <textarea \r\n                    rows={3} \r\n                    className='send-mess_input' \r\n                    value={props.message} \r\n                    onChange={(e:any)=>props.setMess(e.target.value)} \r\n                    onKeyPress={props.keyPressed}>\r\n                </textarea>\r\n                <button className='send-mess_btn' onClick={()=>props.sendMsg()}>Send</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInfo;\r\n","import React,{useState, useEffect} from 'react';\r\nimport socketIOClient from 'socket.io-client'\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {addMess, removeMess,addNotification} from \"../../store/actions/actions\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {updateMess,deleteNotificationServer,addNotificationServer} from \"../../api/userApi\"\r\nimport {connectToServer} from '../../services/socket.service'\r\nimport {IUserRedux,IUsersRedux,IRoomRedux,IMessagesRedux} from '../../interfaces/IRedux'\r\nimport ChatInfo from '../../components/ChatInfo/ChatInfo'\r\n\r\ninterface IChatProps {\r\n    auth:any,\r\n    userInf:IUserRedux,\r\n    userAll:{\r\n        email: string,\r\n        family_name?: string,\r\n        name?: string,\r\n        nickname?: string,\r\n        id_notifications:string,\r\n        __v: number,\r\n        _id: string\r\n    }[]|[],\r\n    mess:({\r\n        mess:string,\r\n        email:string\r\n    })[],\r\n    roomChat:string,\r\n    addMess:Function,removeMess:Function,addNotification:Function\r\n}\r\n\r\nconst Chat: React.FunctionComponent<IChatProps> = (props:IChatProps) => {\r\n    const [endpoint,setEndpoint] = useState(`https://practick.herokuapp.com/`)\r\n    //const [endpoint] = useState<string>(`localhost:5000`)\r\n    const [mess,setMess] = useState<string>('')\r\n    const [chatUser,setUserChat] = useState<string|undefined>('')\r\n    let history = useHistory();\r\n    const socket = socketIOClient(endpoint);\r\n\r\n    const sendMsg =()=>{\r\n        const socket = socketIOClient(endpoint);\r\n        props.addMess({mess,email:props.userInf.email})\r\n        socket.emit('send-chat-message', props.roomChat, mess, props.userInf.email, props.userInf.name,props.userInf.id_notifications)\r\n        let data = props.mess\r\n        data.push({mess,email:props.userInf.email})\r\n        updateMess({room:props.roomChat,mess:data})\r\n        setMess('')\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        if(props.userInf.name===''){\r\n            for (let [key] of Object.entries(localStorage)) {\r\n                if(key !== \"access_token\" && key !== \"id_token\" && key !== \"expires_at\" && key !== \"scopes\"){\r\n                    localStorage.setItem(key,'false')\r\n                }\r\n            }\r\n            history.push('/about')\r\n        }else{\r\n            connectToServer(socket,props.userInf.email,props.roomChat)\r\n            const userEmail =props.roomChat.replace(props.userInf.email,'')\r\n            const userE = props.userAll.filter((el:any)=>el.email===userEmail) \r\n            setUserChat(userE[0].name)\r\n            deleteNotificationServer({email:props.userInf.email,room:props.roomChat})\r\n        }\r\n    },[])\r\n    \r\n    \r\n    useEffect(()=>{\r\n        socket.on('chat-message', (data:any) => {\r\n            if(window.location.pathname === '/chat/'+data.room){\r\n                if(data.email !== props.userInf.email){\r\n                    props.addMess({mess:data.message,name:data.name})\r\n                }\r\n            }else{\r\n                addNotificationServer({email:props.userInf.email,room:data.room})\r\n                props.addNotification(data.room)\r\n                alert(\"You have SMS from\"+data.name)\r\n            }\r\n        })\r\n    })\r\n        \r\n    const leaveRoom = () => {\r\n        props.removeMess()\r\n        history.push('/main')\r\n    }\r\n    \r\n    const keyPressed = (e:any) => {\r\n        if(e.key === \"Enter\"){\r\n            sendMsg()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ChatInfo\r\n            leaveRoom = {leaveRoom}\r\n            chatUser = {chatUser}\r\n            name = {props.userInf.name}\r\n            mess = {props.mess}\r\n            email = {props.userInf.email}\r\n            message = {mess}\r\n            setMess = {setMess}\r\n            keyPressed = {keyPressed}\r\n            sendMsg = {sendMsg}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = ( state:{user:IUserRedux,users:IUsersRedux,messages:IMessagesRedux,room:IRoomRedux} ) => {\r\n    return {\r\n        userInf:state.user,\r\n        userAll:state.users.users,\r\n        mess:state.messages.messages,\r\n        roomChat:state.room.room\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            addMess,removeMess,addNotification\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat);","import  React ,{FC} from 'react';\r\nimport {Route,Switch,Redirect} from 'react-router-dom';\r\nimport About from \"../containers/About/About\";\r\nimport Main from \"../containers/Main/Main\";\r\nimport AuthPage from '../components/AuthPage/AuthPage';\r\nimport Chat from '../containers/Chat/Chat'\r\n\r\ninterface IHomeProps {\r\n    auth:any\r\n}\r\n\r\nconst Home:FC<IHomeProps> = (props:IHomeProps) => {\r\n    const auth = props.auth\r\n    return (\r\n        <>\r\n        <Switch>\r\n            <Route path='/about' exact render={props => auth.isAuthenticated() ? (\r\n                    <About auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/main' exact render={props => auth.isAuthenticated() ? (\r\n                    <Main auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/verified' exact render={props => auth.isAuthenticated() ? (\r\n                    <AuthPage auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            <Route path='/chat/:id' exact render={props => auth.isAuthenticated() ? (\r\n                    <Chat auth={auth}/>\r\n                ):(\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }/>\r\n            \r\n        </Switch>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import auth0 from \"auth0-js\";\r\n\r\nexport default class Auth {\r\n  constructor(history) {\r\n    this.history = history;\r\n    this.userProfile = null;\r\n    this.requestedScopes = \"openid profile email read:courses\";\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: \"yurii-dubnytskyi.eu.auth0.com\",\r\n      clientID: \"LMh9Ao2isV5ay0EJAFQIGW9oqEAQNBy9\",\r\n      //clientID:'iHE49mBeK4r5dzxgWwZaf3LsiQ6lUfzF',\r\n      redirectUri: `https://practick.herokuapp.com/callback`,\r\n      //redirectUri:`http://localhost:3000/callback`,\r\n      responseType: \"token id_token\",\r\n      scope: this.requestedScopes\r\n    });\r\n    console.log(this)\r\n  }\r\n\r\n  login = () => {\r\n    this.auth0.authorize();\r\n  };\r\n\r\n  handleAuthentication = (history) => {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        console.log(this)\r\n        history.push(\"/about\");\r\n      } else if (err) {\r\n        console.log(this)\r\n        history.push(\"/\");\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n        console.log(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  setSession = authResult => {\r\n    console.log(authResult);\r\n    // set the time that the access token will expire\r\n    const expiresAt = JSON.stringify(\r\n      authResult.expiresIn * 1000 + new Date().getTime()\r\n    );\r\n\r\n    // If there is a value on the `scope` param from the authResult,\r\n    // use it to set scopes in the session for the user. Otherwise\r\n    // use the scopes as requested. If no scopes were requested,\r\n    // set it to nothing\r\n    const scopes = authResult.scope || this.requestedScopes || \"\";\r\n\r\n    localStorage.setItem(\"access_token\", authResult.accessToken);\r\n    localStorage.setItem(\"id_token\", authResult.idToken);\r\n    localStorage.setItem(\"expires_at\", expiresAt);\r\n    localStorage.setItem(\"scopes\", JSON.stringify(scopes));\r\n  };\r\n\r\n  isAuthenticated() {\r\n    const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.removeItem(\"access_token\");\r\n    localStorage.removeItem(\"id_token\");\r\n    localStorage.removeItem(\"expires_at\");\r\n    localStorage.removeItem(\"scopes\");\r\n    this.userProfile = null;\r\n    this.auth0.logout({\r\n      clientID: \"LMh9Ao2isV5ay0EJAFQIGW9oqEAQNBy9\",\r\n      //clientID:'iHE49mBeK4r5dzxgWwZaf3LsiQ6lUfzF',\r\n      returnTo: `https://practick.herokuapp.com`\r\n      //returnTo: `http://localhost:3000`\r\n    });\r\n  };\r\n\r\n  getAccessToken = () => {\r\n    const accessToken = localStorage.getItem(\"access_token\");\r\n    if (!accessToken) {\r\n      throw new Error(\"No access token found.\");\r\n    }\r\n    return accessToken;\r\n  };\r\n\r\n  getProfile = cb => {\r\n    if (this.userProfile) return cb(this.userProfile);\r\n    this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\r\n      if (profile) this.userProfile = profile;\r\n      cb(profile, err);\r\n    });\r\n  };\r\n\r\n  userHasScopes(scopes) {\r\n    const grantedScopes = (\r\n      JSON.parse(localStorage.getItem(\"scopes\")) || \"\"\r\n    ).split(\" \");\r\n    return scopes.every(scope => grantedScopes.includes(scope));\r\n  }\r\n}\r\n","import React ,{FC,useEffect}from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Greeting from \"./pages/Greeting\"\nimport Home from \"./pages/Home\"\nimport Auth from \"./auth0/Auth\"\nconst App:FC<any> = (props:any) => {\n    const auth = new Auth(window.history)\n\n    \n\n     return (\n        <div>\n            <BrowserRouter>\n                <Greeting auth={auth} {...props}/>\n                <Home auth={auth}/>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObject = (oldObject:any, updatedValues:any) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedValues\r\n    }\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport { IUserRedux } from '../../interfaces/IRedux';\r\n\r\nconst initialState:IUserRedux = {\r\n    id:'',\r\n    name:'',\r\n    email:'',\r\n    nickname:'',\r\n    family_name:'',\r\n    id_notifications:'',\r\n    isAuth:false\r\n};\r\n\r\nconst user = (state:IUserRedux = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.SET_USER_DATA:\r\n            return updateObject(state,{\r\n                id:action.data.id,\r\n                name:action.data.name,\r\n                email:action.data.email,\r\n                nickname:action.data.nickname,\r\n                family_name:action.data.family_name,\r\n                id_notifications:action.data.id_notifications,\r\n                isAuth:true\r\n            })\r\n        case actionTypes.UPDATE_USER_DATA:\r\n            return updateObject(state,{\r\n                name:action.data.name,\r\n                nickname:action.data.nickname,\r\n                family_name:action.data.family_name,\r\n            })\r\n        case actionTypes.DELETE_USER:\r\n            return updateObject(state,{\r\n                id:0,\r\n                name:'',\r\n                email:'',\r\n                nickname:'',\r\n                family_name:'',\r\n                isAuth:false\r\n        })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default user","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IUsersRedux, IUserRedux} from '../../interfaces/IRedux'\r\n\r\nconst initialState:IUsersRedux = {\r\n    users:[]\r\n};\r\n\r\nconst users = (state:IUsersRedux = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.GET_ALL:\r\n            return updateObject(state,{\r\n                users:[...action.users]\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default users","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IMessagesRedux} from '../../interfaces/IRedux'\r\n\r\nconst initialState:IMessagesRedux = {\r\n    messages:[]\r\n};\r\n\r\nconst message = (state:IMessagesRedux = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_MESS:\r\n            return updateObject(state,{\r\n                messages:[...state.messages,action.mess]\r\n            })\r\n        case actionTypes.ADD_INIT_MESS:\r\n            return updateObject(state,{\r\n                messages:action.mess\r\n            })\r\n        case actionTypes.REMOVE_MESS:\r\n            return updateObject(state,{\r\n                messages:[]\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default message","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IRoomRedux} from '../../interfaces/IRedux'\r\n\r\nconst initialState:IRoomRedux = {\r\n    room:''\r\n};\r\n\r\nconst room = (state:IRoomRedux = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_ROOM:\r\n            return updateObject(state,{\r\n                room:action.room\r\n            })\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default room","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {INotificationRedux} from '../../interfaces/IRedux'\r\n\r\nconst initialState:INotificationRedux = {\r\n    notifications:[]\r\n};\r\n\r\nconst addNotification = (state:any,addData:any) => { \r\n    return state.map((el:any)=>{\r\n        if(el.room === addData){\r\n            el.notifications += 1\r\n        }\r\n    }) \r\n}\r\n\r\nconst message = (state:INotificationRedux = initialState,action:any)=>{\r\n    switch (action.type){\r\n        case actionTypes.INIT_NOTIFICATION:\r\n            return updateObject(state,{\r\n                notifications:[...action.initData]\r\n            })\r\n        case actionTypes.ADD_NOTIFICATION:\r\n            return updateObject(state,{\r\n                notifications:[...state.notifications,addNotification(state.notifications,action.addData)]\r\n            })\r\n        \r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default message","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport user from \"./store/reducers/user\"\r\nimport users from \"./store/reducers/users\"\r\nimport messages from \"./store/reducers/messages\"\r\nimport room from \"./store/reducers/room\"\r\nimport notifications from './store/reducers/notifications'\r\nimport {IStoreRedux} from './interfaces/IRedux'\r\n\r\nconst rootReducer = combineReducers<IStoreRedux>({\r\n  user:user,\r\n  users:users,\r\n  messages:messages,\r\n  room:room,\r\n  notifications:notifications\r\n});\r\n\r\nconst logger = (store:any) => {\r\n  return (next:any) => {\r\n      return (action:any) => {\r\n          console.log('[Middleware] Dispatching', action);\r\n          const result = next(action);\r\n          console.log('[Middleware] next state', store.getState());\r\n          return result;\r\n      }\r\n  }\r\n};\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}